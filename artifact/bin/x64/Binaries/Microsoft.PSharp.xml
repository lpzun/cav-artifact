<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.PSharp</name>
    </assembly>
    <members>
        <member name="T:Microsoft.PSharp.Configuration">
            <summary>
            The P# project configurations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.SolutionFilePath">
            <summary>
            The path to the solution file.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.OutputFilePath">
            <summary>
            The output path.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ProjectName">
            <summary>
            The name of the project to analyze.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.Timeout">
            <summary>
            Timeout in seconds.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.CompilationTarget">
            <summary>
            Requested compilation target.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.OptimizationTarget">
            <summary>
            Requested optimization target.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.CustomCompilerPassAssemblyPaths">
            <summary>
            List of assembly paths to used-defined compiler passes.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.AnalyzeDataFlow">
            <summary>
            Enables the data flow analysis.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.AnalyzeDataRaces">
            <summary>
            Enables the static data race analysis.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.DoStateTransitionAnalysis">
            <summary>
            Perform the state transition analysis.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ShowControlFlowInformation">
            <summary>
            Reports the control-flow information.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ShowDataFlowInformation">
            <summary>
            Reports the data-flow information.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ShowFullDataFlowInformation">
            <summary>
            Reports the full data-flow information.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.RewriteCSharpVersion">
            <summary>
            The version of CSharp to target in rewriting, if specified.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.RuntimeGeneration">
            <summary>
            The current runtime generation.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.AssemblyToBeAnalyzed">
            <summary>
            The assembly to be analyzed for bugs.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.TestMethodName">
            <summary>
            Test method to be used.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.SchedulingStrategy">
            <summary>
            Scheduling strategy to use with the P# tester.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ReductionStrategy">
            <summary>
            Reduction strategy to use with the P# tester.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.SchedulingIterations">
            <summary>
            Number of scheduling iterations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.RandomSchedulingSeed">
            <summary>
            Seed for random scheduling strategies.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.IncrementalSchedulingSeed">
            <summary>
            If true, the seed will increment in each
            testing iteration.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.PerformFullExploration">
            <summary>
            If true, the P# tester performs a full exploration,
            and does not stop when it finds a bug.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.MaxFairSchedulingSteps">
            <summary>
            The maximum scheduling steps to explore
            for fair schedulers.
            By default there is no bound.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.MaxUnfairSchedulingSteps">
            <summary>
            The maximum scheduling steps to explore
            for unfair schedulers.
            By default there is no bound.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Configuration.MaxSchedulingSteps">
            <summary>
            The maximum scheduling steps to explore
            for both fair and unfair schedulers.
            By default there is no bound.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.UserExplicitlySetMaxFairSchedulingSteps">
            <summary>
            True if the user has explicitly set the
            fair scheduling steps bound.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ParallelBugFindingTasks">
            <summary>
            Number of parallel bug-finding tasks.
            By default it is 1 task.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.RunAsParallelBugFindingTask">
            <summary>
            Runs this process as a parallel bug-finding task.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.TestingSchedulerEndPoint">
            <summary>
            The testing scheduler unique endpoint.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.TestingSchedulerProcessId">
            <summary>
            The testing scheduler process id.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.TestingProcessId">
            <summary>
            The unique testing process id.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ConsiderDepthBoundHitAsBug">
            <summary>
            If true, then the P# tester will consider an execution
            that hits the depth bound as buggy.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.PrioritySwitchBound">
            <summary>
            The priority switch bound. By default it is 2.
            Used by priority-based schedulers.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.DelayBound">
            <summary>
            Delay bound. By default it is 2.
            Used by delay-bounding schedulers.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.CoinFlipBound">
            <summary>
            Coin-flip bound. By default it is 2.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.SafetyPrefixBound">
            <summary>
            Safety prefix bound. By default it is 0.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableLivenessChecking">
            <summary>
            Enables liveness checking during bug-finding.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.LivenessTemperatureThreshold">
            <summary>
            The liveness temperature threshold. If it is 0
            then it is disabled.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableCycleDetection">
            <summary>
            Enables cycle-detection using state-caching
            for liveness checking.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableUserDefinedStateHashing">
            <summary>
            If this option is enabled, then all <see cref="P:Microsoft.PSharp.Machine.HashedState"/>
            and <see cref="P:Microsoft.PSharp.Event.HashedState"/> state-hashing methods are used
            to improve the accurracy of state-caching for liveness checking.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableMonitorsInProduction">
            <summary>
            Enables (safety) monitors in the production runtime.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.AttachDebugger">
            <summary>
            Attaches the debugger during trace replay.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ScheduleFile">
            <summary>
            The schedule file to be replayed.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ScheduleTrace">
            <summary>
            The schedule trace to be replayed.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableDataRaceDetection">
            <summary>
            Enables data-race detection during testing.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.RaceFound">
            <summary>
            True if a race is found.
            TODO: Does not belong here.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableReadWriteTracing">
            <summary>
            Enables tracking line number information for reads and writes.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableRaceDetectorLogging">
            <summary>
            Enables race detector logging.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ReportCodeCoverage">
            <summary>
            Enables code coverage reporting of a P# program.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ReportActivityCoverage">
            <summary>
            Enables activity coverage reporting of a P# program.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.DebugActivityCoverage">
            <summary>
            Enables activity coverage debugging.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.AdditionalCodeCoverageAssemblies">
            <summary>
            Additional assembly specifications to instrument for code coverage, besides those in the
            dependency graph between <see cref="F:Microsoft.PSharp.Configuration.AssemblyToBeAnalyzed"/> and the Microsoft.PSharp DLLs.
            Key is filename, value is whether it is a list file (true) or a single file (false).
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ContainerId">
            <summary>
            The unique container id.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.NumberOfContainers">
            <summary>
            Number of containers.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.RemoteApplicationFilePath">
            <summary>
            The path to the P# application to run remotely.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.Verbose">
            <summary>
            Verbosity level.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ShowWarnings">
            <summary>
            Shows warnings.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableDebugging">
            <summary>
            Enables debugging.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableProfiling">
            <summary>
            Enables profiling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.KeepTemporaryFiles">
            <summary>
            Keeps the temporary files.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableColoredConsoleOutput">
            <summary>
            Enables colored console output.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ThrowInternalExceptions">
            <summary>
            If true, then P# will throw any internal exceptions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.DisableEnvironmentExit">
            <summary>
            If true, then environment exit will be disabled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Configuration.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Configuration.Create">
            <summary>
            Creates a new configuration.
            </summary>
            <returns>Configuration</returns>
        </member>
        <member name="M:Microsoft.PSharp.Configuration.WithVerbosityEnabled(System.Int32)">
            <summary>
            Updates the configuration with verbose output enabled
            and returns it.
            </summary>
            <param name="level">Verbosity level</param>
            <returns>Configuration</returns>
        </member>
        <member name="M:Microsoft.PSharp.Configuration.WithDebuggingEnabled(System.Boolean)">
            <summary>
            Updates the configuration with debugging information enabled
            or disabled and returns it.
            </summary>
            <param name="isEnabled">Is debugging enabled</param>
            <returns>Configuration</returns>
        </member>
        <member name="M:Microsoft.PSharp.Configuration.WithStrategy(Microsoft.PSharp.Utilities.SchedulingStrategy)">
            <summary>
            Updates the configuration with the scheduling strategy
            and returns it.
            </summary>
            <param name="strategy">SchedulingStrategy</param>
            <returns>Configuration</returns>
        </member>
        <member name="M:Microsoft.PSharp.Configuration.WithNumberOfIterations(System.Int32)">
            <summary>
            Updates the configuration with the number of iterations
            and returns it.
            </summary>
            <param name="iterations">Number of iterations</param>
            <returns>Configuration</returns>
        </member>
        <member name="M:Microsoft.PSharp.Configuration.IsRewriteCSharpVersion(System.Int32,System.Int32)">
            <summary>
            Indicates whether the requested C# version is supported for for rewriting.
            </summary>
            <param name="major">The major version required</param>
            <param name="minor">The minor version required</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PSharp.IO.Debug">
            <summary>
            Static class implementing debug reporting methods.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.IO.Debug.IsEnabled">
            <summary>
            Checks if debugging is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Debug.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Debug.Write(System.String,System.Object[])">
            <summary>
            Writes the debugging information to the output stream. The
            print occurs only if debugging is enabled.
            </summary>
            <param name="format">Text</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.Debug.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the debugging information, followed by the current
            line terminator, to the output stream. The print occurs
            only if debugging is enabled.
            </summary>
            <param name="format">Text</param>
            <param name="args">Arguments</param>
        </member>
        <member name="T:Microsoft.PSharp.IO.Error">
            <summary>
            Static class implementing error reporting methods.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Error.Report(System.String,System.Object[])">
            <summary>
            Reports a generic error to the user.
            </summary>
            <param name="format">Text</param>
            <param name="args">Parameters</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.Error.ReportAndExit(System.String)">
            <summary>
            Reports a generic error to the user and exits.
            </summary>
            <param name="value">Text</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.Error.ReportAndExit(System.String,System.Object[])">
            <summary>
            Reports a generic error to the user and exits.
            </summary>
            <param name="format">Text</param>
            <param name="args">Parameters</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.Error.Write(System.ConsoleColor,System.String)">
            <summary>
             Writes the specified string value to the output stream.
            </summary>
            <param name="color">ConsoleColor</param>
            <param name="value">Text</param>
        </member>
        <member name="T:Microsoft.PSharp.IO.ConsoleLogger">
            <summary>
            Logger that writes text to the console.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ConsoleLogger.Write(System.String)">
            <summary>
            Writes the specified string value.
            </summary>
            <param name="value">Text</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ConsoleLogger.Write(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects.
            </summary>
            <param name="format">Text</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ConsoleLogger.WriteLine(System.String)">
            <summary>
            Writes the specified string value, followed by the
            current line terminator.
            </summary>
            <param name="value">Text</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ConsoleLogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects,
            followed by the current line terminator.
            </summary>
            <param name="format">Text</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ConsoleLogger.Dispose">
            <summary>
            Disposes the logger.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.IO.DisposingLogger">
            <summary>
            Logger that disposes all written text.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.IO.DisposingLogger.Configuration">
            <summary>
            The configuration that sets the logging verbosity.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.IO.DisposingLogger.LoggingVerbosity">
            <summary>
            The minimum logging verbosity level (should be >= 0, use 0 to log all messages).
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.Write(System.String)">
            <summary>
            Writes the specified string value.
            </summary>
            <param name="value">Text</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.Write(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects.
            </summary>
            <param name="format">Text</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.WriteLine(System.String)">
            <summary>
            Writes the specified string value, followed by the
            current line terminator.
            </summary>
            <param name="value">Text</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects,
            followed by the current line terminator.
            </summary>
            <param name="format">Text</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnEnqueue(Microsoft.PSharp.MachineId,System.String)">
            <summary>
            Called when an event is about to be enqueued to a machine.
            </summary>
            <param name="machineId">Id of the machine that the event is being enqueued to.</param>        
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnDequeue(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when an event is dequeued by a machine.
            </summary>
            <param name="machineId">Id of the machine that the event is being dequeued by.</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/>, if any.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnDefault(Microsoft.PSharp.MachineId,System.String)">
            <summary>
            Called when the default event handler for a state is about to be executed.
            </summary>
            <param name="machineId">Id of the machine that the state will execute in.</param>
            <param name="currentStateName">Name of the current state of the machine.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnGoto(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine transitions states via a 'goto'.
            </summary>
            <param name="machineId">Id of the machine.</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/>, if any.</param>
            <param name="newStateName">The target state of goto.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnPush(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine is being pushed to a state.
            </summary>
            <param name="machineId">Id of the machine being pushed to the state.</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/>, if any.</param>
            <param name="newStateName">The state the machine is pushed to.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnPop(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine has been popped from a state.
            </summary>
            <param name="machineId">Id of the machine that the pop executed in.</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/>, if any.</param>
            <param name="restoredStateName">The name of the state being restored, if any.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnPopUnhandledEvent(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            When an event cannot be handled in the current state, its exit handler is executed and then the state is 
            popped and any previous "current state" is reentered. This handler is called when that pop has been done.
            </summary>
            <param name="machineId">Id of the machine that the pop executed in.</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/> (which is being re-entered), if any.</param>
            <param name="eventName">The name of the event that cannot be handled.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnReceive(Microsoft.PSharp.MachineId,System.String,System.String,System.Boolean)">
            <summary>
            Called when an event is received by a machine.
            </summary>
            <param name="machineId">Id of the machine that received the event.</param>
            <param name="eventName">The name of the event.</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/>, if any.</param>
            <param name="wasBlocked">The machine was waiting for one or more specific events, and <paramref name="eventName"/> was one of them.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnWait(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine enters a wait state.
            </summary>
            <param name="machineId">Id of the machine that is entering the wait state.</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/>, if any.</param>
            <param name="eventNames">The names of the specific events being waited for, if any.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnSend(Microsoft.PSharp.MachineId,Microsoft.PSharp.MachineId,System.String,System.String,System.Nullable{System.Guid},System.Boolean)">
            <summary>
            Called when an event is sent to a target machine.
            </summary>
            <param name="targetMachineId">Id of the target machine.</param>        
            <param name="senderId">The machine that sent the event, if any.</param>
            <param name="senderStateName">The name of the current state of the sender machine, if applicable
                (if it is a non-Machine specialization of an AbstractMachine, it is not applicable).</param>
            <param name="eventName">The event being sent.</param>
            <param name="operationGroupId">The operation group id, if any.</param>
            <param name="isTargetHalted">Is the target machine halted.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnCreateMachine(Microsoft.PSharp.MachineId,Microsoft.PSharp.MachineId)">
            <summary>
            Called when a machine has been created.
            </summary>
            <param name="machineId">The id of the machine that has been created.</param>
            <param name="creator">Id of the host machine, null otherwise.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnCreateMonitor(System.String,Microsoft.PSharp.MachineId)">
            <summary>
            Called when a monitor has been created.
            </summary>
            <param name="monitorTypeName">The name of the type of the monitor that has been created.</param>
            <param name="monitorId">The id of the monitor that has been created.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnHalt(Microsoft.PSharp.MachineId,System.Int32)">
            <summary>
            Called when a machine has been halted.
            </summary>
            <param name="machineId">The id of the machine that has been halted.</param>
            <param name="inboxSize">Approximate size of the machine inbox.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnRandom(Microsoft.PSharp.MachineId,System.Object)">
            <summary>
            Called when a random result has been obtained.
            </summary>
            <param name="machineId">The id of the source machine, if any; otherwise, the runtime itself was the source.</param>
            <param name="result">The random result (may be bool or int).</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnMachineState(Microsoft.PSharp.MachineId,System.String,System.Boolean)">
            <summary>
            Called when a machine enters or exits a state.
            </summary>
            <param name="machineId">The id of the machine entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited.</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnMachineEvent(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine raises an event.
            </summary>
            <param name="machineId">The id of the machine raising the event.</param>
            <param name="currentStateName">The name of the current state of the machine raising the event.</param>
            <param name="eventName">The name of the event being raised.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnMachineAction(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine executes an action.
            </summary>
            <param name="machineId">The id of the machine executing the action.</param>
            <param name="currentStateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnMachineExceptionThrown(Microsoft.PSharp.MachineId,System.String,System.String,System.Exception)">
            <summary>
            Called when a machine throws an exception
            </summary>
            <param name="machineId">The id of the machine that threw the exception.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="currentStateName">The name of the current machine state.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnMachineExceptionHandled(Microsoft.PSharp.MachineId,System.String,System.String,System.Exception)">
            <summary>
            Called when a machine's OnException method is used to handle a thrown exception
            </summary>
            <param name="machineId">The id of the machine that threw the exception.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="currentStateName">The name of the current machine state.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnMonitorState(System.String,Microsoft.PSharp.MachineId,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Called when a monitor enters or exits a state.
            </summary>
            <param name="monitorTypeName">The name of the monitor entering or exiting the state.</param>
            <param name="monitorId">The id of the monitor entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited; if <paramref name="isInHotState"/>
                is not null, then the temperature is appended to the statename in brackets, e.g. "stateName[hot]".</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
                else no liveness state is available.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnMonitorEvent(System.String,Microsoft.PSharp.MachineId,System.String,System.String,System.Boolean)">
            <summary>
            Called when a monitor is about to process or has raised an event.
            </summary>
            <param name="monitorTypeName">Name of type of the monitor that will process or has raised the event.</param>
            <param name="monitorId">Id of the monitor that will process or has raised the event.</param>
            <param name="currentStateName">The name of the state in which the event is being raised.</param>
            <param name="eventName">The name of the event.</param>
            <param name="isProcessing">If true, the monitor is processing the event; otherwise it has raised it.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnMonitorAction(System.String,Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a monitor executes an action.
            </summary>
            <param name="monitorTypeName">Name of type of the monitor that is executing the action.</param>
            <param name="monitorId">Name of type of the monitor that is executing the action.</param>
            <param name="currentStateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnError(System.String)">
            <summary>
            Called for general error reporting via pre-constructed text.
            </summary>
            <param name="text">The text of the error report.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnStrategyError(Microsoft.PSharp.Utilities.SchedulingStrategy,System.String)">
            <summary>
            Called for errors detected by a specific scheduling strategy.
            </summary>
            <param name="strategy">The scheduling strategy that was used.</param>
            <param name="strategyDescription">More information about the scheduling strategy.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.Dispose">
            <summary>
            Disposes the logger.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.IO.ILogger">
            <summary>
            Interface for the P# logger.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.IO.ILogger.Configuration">
            <summary>
            The configuration that sets the logging verbosity.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.IO.ILogger.LoggingVerbosity">
            <summary>
            The minimum logging verbosity level (should be >= 0, use 0 to log all messages).
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.Write(System.String)">
            <summary>
            Writes the specified string value.
            </summary>
            <param name="value">Text</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.Write(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects.
            </summary>
            <param name="format">Text</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.WriteLine(System.String)">
            <summary>
            Writes the specified string value, followed by the
            current line terminator.
            </summary>
            <param name="value">Text</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects,
            followed by the current line terminator.
            </summary>
            <param name="format">Text</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnEnqueue(Microsoft.PSharp.MachineId,System.String)">
            <summary>
            Called when an event is about to be enqueued to a machine.
            </summary>
            <param name="machineId">Id of the machine that the event is being enqueued to.</param>        
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnDequeue(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when an event is dequeued by a machine.
            </summary>
            <param name="machineId">Id of the machine that the event is being dequeued by.</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/>, if any.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnDefault(Microsoft.PSharp.MachineId,System.String)">
            <summary>
            Called when the default event handler for a state is about to be executed.
            </summary>
            <param name="machineId">Id of the machine that the state will execute in.</param>
            <param name="currentStateName">Name of the current state of the machine.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnGoto(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine transitions states via a 'goto'.
            </summary>
            <param name="machineId">Id of the machine.</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/>, if any.</param>
            <param name="newStateName">The target state of goto.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnPush(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine is being pushed to a state.
            </summary>
            <param name="machineId">Id of the machine being pushed to the state.</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/>, if any.</param>
            <param name="newStateName">The state the machine is pushed to.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnPop(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine has been popped from a state.
            </summary>
            <param name="machineId">Id of the machine that the pop executed in.</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/>, if any.</param>
            <param name="restoredStateName">The name of the state being restored, if any.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnPopUnhandledEvent(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            When an event cannot be handled in the current state, its exit handler is executed and then the state is 
            popped and any previous "current state" is reentered. This handler is called when that pop has been done.
            </summary>
            <param name="machineId">Id of the machine that the pop executed in.</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/>
                (which is being re-entered), if any.</param>
            <param name="eventName">The name of the event that cannot be handled.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnReceive(Microsoft.PSharp.MachineId,System.String,System.String,System.Boolean)">
            <summary>
            Called when an event is received by a machine.
            </summary>
            <param name="machineId">Id of the machine that received the event.</param>
            <param name="eventName">The name of the event.</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/>, if any.</param>
            <param name="wasBlocked">The machine was waiting for one or more specific events,
                and <paramref name="eventName"/> was one of them</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnWait(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine enters a wait state.
            </summary>
            <param name="machineId">Id of the machine that is entering the wait state.</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/>, if any.</param>
            <param name="eventNames">The names of the specific events being waited for, if any.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnSend(Microsoft.PSharp.MachineId,Microsoft.PSharp.MachineId,System.String,System.String,System.Nullable{System.Guid},System.Boolean)">
            <summary>
            Called when an event is sent to a target machine.
            </summary>
            <param name="targetMachineId">Id of the target machine.</param>        
            <param name="senderId">The id of the machine that sent the event, if any.</param>
            <param name="senderStateName">The name of the current state of the sender machine, if applicable
                (if it is a non-Machine specialization of an AbstractMachine, it is not applicable).</param>
            <param name="eventName">The event being sent.</param>
            <param name="operationGroupId">The operation group id, if any.</param>
            <param name="isTargetHalted">Is the target machine halted.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnCreateMachine(Microsoft.PSharp.MachineId,Microsoft.PSharp.MachineId)">
            <summary>
            Called when a machine has been created.
            </summary>
            <param name="machineId">The id of the machine that has been created.</param>
            <param name="creator">Id of the host machine, null otherwise.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnCreateMonitor(System.String,Microsoft.PSharp.MachineId)">
            <summary>
            Called when a monitor has been created.
            </summary>
            <param name="monitorTypeName">The name of the type of the monitor that has been created.</param>
            <param name="monitorId">The id of the monitor that has been created.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnHalt(Microsoft.PSharp.MachineId,System.Int32)">
            <summary>
            Called when a machine has been halted.
            </summary>
            <param name="machineId">The id of the machine that has been halted.</param>
            <param name="inboxSize">Approximate size of the machine inbox.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnRandom(Microsoft.PSharp.MachineId,System.Object)">
            <summary>
            Called when a random result has been obtained.
            </summary>
            <param name="machineId">The id of the source machine, if any; otherwise, the runtime itself was the source.</param>
            <param name="result">The random result (may be bool or int).</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnMachineState(Microsoft.PSharp.MachineId,System.String,System.Boolean)">
            <summary>
            Called when a machine enters or exits a state.
            </summary>
            <param name="machineId">The id of the machine entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited.</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnMachineEvent(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine raises an event.
            </summary>
            <param name="machineId">The id of the machine raising the event.</param>
            <param name="currentStateName">The name of the current state of the machine raising the event.</param>
            <param name="eventName">The name of the event being raised.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnMachineAction(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine executes an action.
            </summary>
            <param name="machineId">The id of the machine executing the action.</param>
            <param name="currentStateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnMachineExceptionThrown(Microsoft.PSharp.MachineId,System.String,System.String,System.Exception)">
            <summary>
            Called when a machine throws an exception
            </summary>
            <param name="machineId">The id of the machine that threw the exception.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="currentStateName">The name of the current machine state.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnMachineExceptionHandled(Microsoft.PSharp.MachineId,System.String,System.String,System.Exception)">
            <summary>
            Called when a machine's OnException method is used to handle a thrown exception
            </summary>
            <param name="machineId">The id of the machine that threw the exception.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="currentStateName">The name of the current machine state.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnMonitorState(System.String,Microsoft.PSharp.MachineId,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Called when a monitor enters or exits a state.
            </summary>
            <param name="monitorTypeName">The name of the monitor entering or exiting the state.</param>
            <param name="monitorId">The id of the monitor entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited; if <paramref name="isInHotState"/>
                is not null, then the temperature is appended to the statename in brackets, e.g. "stateName[hot]".</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
                else no liveness state is available.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnMonitorEvent(System.String,Microsoft.PSharp.MachineId,System.String,System.String,System.Boolean)">
            <summary>
            Called when a monitor is about to process or has raised an event.
            </summary>
            <param name="monitorTypeName">Name of type of the monitor that will process or has raised the event.</param>
            <param name="monitorId">Id of the monitor that will process or has raised the event.</param>
            <param name="currentStateName">The name of the state in which the event is being raised.</param>
            <param name="eventName">The name of the event.</param>
            <param name="isProcessing">If true, the monitor is processing the event; otherwise it has raised it.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnMonitorAction(System.String,Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a monitor executes an action.
            </summary>
            <param name="monitorTypeName">Name of type of the monitor that is executing the action.</param>
            <param name="monitorId">Name of type of the monitor that is executing the action.</param>
            <param name="currentStateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnError(System.String)">
            <summary>
            Called for general error reporting via pre-constructed text.
            </summary>
            <param name="text">The text of the error report.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnStrategyError(Microsoft.PSharp.Utilities.SchedulingStrategy,System.String)">
            <summary>
            Called for errors detected by a specific scheduling strategy.
            </summary>
            <param name="strategy">The scheduling strategy that was used.</param>
            <param name="strategyDescription">More information about the scheduling strategy.</param>
        </member>
        <member name="T:Microsoft.PSharp.IO.InMemoryLogger">
            <summary>
            Logger that writes text in-memory.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.IO.InMemoryLogger.Writer">
            <summary>
            Underlying string writer.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.InMemoryLogger.#ctor">
            <summary>
            Creates a new in-memory logger that logs everything by default.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.InMemoryLogger.Write(System.String)">
            <summary>
            Writes the specified string value.
            </summary>
            <param name="value">Text</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.InMemoryLogger.Write(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects.
            </summary>
            <param name="format">Text</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.InMemoryLogger.WriteLine(System.String)">
            <summary>
            Writes the specified string value, followed by the
            current line terminator.
            </summary>
            <param name="value">Text</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.InMemoryLogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects,
            followed by the current line terminator.
            </summary>
            <param name="format">Text</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.InMemoryLogger.ToString">
            <summary>
            Returns the logged text as a string.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.InMemoryLogger.Dispose">
            <summary>
            Disposes the logger.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.IO.LogWriter">
            <summary>
            Text writer that writes to the specified logger.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.IO.LogWriter.Logger">
            <summary>
            The installed logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.#ctor(Microsoft.PSharp.IO.ILogger)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">ILogger</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.Boolean)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.Char)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.Char[])">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.Decimal)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.Double)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.Single)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.Int32)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.Int64)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.Object)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.String,System.Object)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.String,System.Object[])">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.String)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.UInt32)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.UInt64)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine">
            <summary>
            Writes a new line to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.Boolean)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.Char)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.Char[])">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.Decimal)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.Double)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.Single)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.Int32)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.Int64)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.Object)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.String,System.Object)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.String)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.UInt32)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.UInt64)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.IO.LogWriter.Encoding">
            <summary>
            The character encoding in which the output is written.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.ToString">
            <summary>
            Returns the logged text as a string.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.IO.StateMachineLogger">
            <summary>
            An implementation of <see cref="T:Microsoft.PSharp.IO.ILogger"/> that by default passes all logging commands to the variants
            of the <see cref="M:Microsoft.PSharp.IO.StateMachineLogger.Write(System.String)"/> method if the <see cref="F:Microsoft.PSharp.Configuration.Verbose"/> option is set to
            >= <see cref="P:Microsoft.PSharp.IO.StateMachineLogger.LoggingVerbosity"/>. This class may be subclassed and its methods overridden.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.IO.StateMachineLogger.Configuration">
            <summary>
            The configuration that sets the logging verbosity.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.IO.StateMachineLogger.LoggingVerbosity">
            <summary>
            The minimum logging verbosity level. If <see cref="F:Microsoft.PSharp.Configuration.Verbose"/> is >=
            <see cref="P:Microsoft.PSharp.IO.StateMachineLogger.LoggingVerbosity"/>, then messages are logged (0 logs all messages).
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.IO.StateMachineLogger.IsVerbose">
            <summary>
            Convenience method to indicate whether <see cref="F:Microsoft.PSharp.Configuration.Verbose"/> is at or
            above <see cref="P:Microsoft.PSharp.IO.StateMachineLogger.LoggingVerbosity"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.#ctor(System.Int32)">
            <summary>
            Constructs the logger. The logger will be assigned the Runtime's Configuration
            object when it is passed to <see cref="M:Microsoft.PSharp.PSharpRuntime.SetLogger(Microsoft.PSharp.IO.ILogger)"/>.
            </summary>
            <param name="loggingVerbosity">The initial logging verbosity level.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.Write(System.String)">
            <summary>
            Writes the specified string value.
            </summary>
            <param name="value">Text</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.Write(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects.
            </summary>
            <param name="format">Text</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.WriteLine(System.String)">
            <summary>
            Writes the specified string value, followed by the
            current line terminator.
            </summary>
            <param name="value">Text</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects,
            followed by the current line terminator.
            </summary>
            <param name="format">Text</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnEnqueue(Microsoft.PSharp.MachineId,System.String)">
            <summary>
            Called when an event is about to be enqueued to a machine.
            </summary>
            <param name="machineId">Id of the machine that the event is being enqueued to.</param>        
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnDequeue(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when an event is dequeued by a machine.
            </summary>
            <param name="machineId">Id of the machine that the event is being dequeued by.</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/>, if any.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnDefault(Microsoft.PSharp.MachineId,System.String)">
            <summary>
            Called when the default event handler for a state is about to be executed.
            </summary>
            <param name="machineId">Id of the machine that the state will execute in.</param>
            <param name="currentStateName">Name of the current state of the machine.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnGoto(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine transitions states via a 'goto'.
            </summary>
            <param name="machineId">Id of the machine.</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/>, if any.</param>
            <param name="newStateName">The target state of goto.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnPush(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine is being pushed to a state.
            </summary>
            <param name="machineId">Id of the machine being pushed to the state</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/>, if any.</param>
            <param name="newStateName">The state the machine is pushed to.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnPop(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine has been popped from a state.
            </summary>
            <param name="machineId">Id of the machine that the pop executed in.</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/>, if any.</param>
            <param name="restoredStateName">The name of the state being re-entered, if any</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnPopUnhandledEvent(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            When an event cannot be handled in the current state, its exit handler is executed and then the state is 
            popped and any previous "current state" is reentered. This handler is called when that pop has been done.
            </summary>
            <param name="machineId">Id of the machine that the pop executed in.</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/>
                (which is being re-entered), if any</param>
            <param name="eventName">The name of the event that cannot be handled.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnReceive(Microsoft.PSharp.MachineId,System.String,System.String,System.Boolean)">
            <summary>
            Called when an event is received by a machine.
            </summary>
            <param name="machineId">Id of the machine that received the event.</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/>, if any.</param>
            <param name="eventName">The name of the event.</param>
            <param name="wasBlocked">The machine was waiting for one or more specific events,
                and <paramref name="eventName"/> was one of them</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnWait(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine enters a wait state.
            </summary>
            <param name="machineId">Id of the machine that is entering the wait state.</param>
            <param name="currentStateName">The name of the current state of <paramref name="machineId"/>, if any.</param>
            <param name="eventNames">The names of the specific events being waited for, if any.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnSend(Microsoft.PSharp.MachineId,Microsoft.PSharp.MachineId,System.String,System.String,System.Nullable{System.Guid},System.Boolean)">
            <summary>
            Called when an event is sent to a target machine.
            </summary>
            <param name="targetMachineId">Id of the target machine.</param>        
            <param name="senderId">The id of the machine that sent the event, if any.</param>
            <param name="senderStateName">The name of the current state of the sender machine, if applicable
                (if it is a non-Machine specialization of an AbstractMachine, it is not applicable).</param>
            <param name="eventName">The event being sent.</param>
            <param name="operationGroupId">The operation group id, if any.</param>
            <param name="isTargetHalted">Is the target machine halted.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnCreateMachine(Microsoft.PSharp.MachineId,Microsoft.PSharp.MachineId)">
            <summary>
            Called when a machine has been created.
            </summary>
            <param name="machineId">The id of the machine that has been created.</param>
            <param name="creator">Id of the host machine, null otherwise.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnCreateMonitor(System.String,Microsoft.PSharp.MachineId)">
            <summary>
            Called when a monitor has been created.
            </summary>
            <param name="monitorTypeName">The name of the type of the monitor that has been created.</param>
            <param name="monitorId">The id of the monitor that has been created.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnHalt(Microsoft.PSharp.MachineId,System.Int32)">
            <summary>
            Called when a machine has been halted.
            </summary>
            <param name="machineId">The id of the machine that has been halted.</param>
            <param name="inboxSize">Approximate size of the machine inbox.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnRandom(Microsoft.PSharp.MachineId,System.Object)">
            <summary>
            Called when a random result has been obtained.
            </summary>
            <param name="machineId">The id of the source machine, if any; otherwise, the runtime itself was the source.</param>
            <param name="result">The random result (may be bool or int).</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnMachineState(Microsoft.PSharp.MachineId,System.String,System.Boolean)">
            <summary>
            Called when a machine enters or exits a state.
            </summary>
            <param name="machineId">The id of the machine entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited.</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnMachineEvent(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine raises an event.
            </summary>
            <param name="machineId">The id of the machine raising the event.</param>
            <param name="currentStateName">The name of the state in which the action is being executed.</param>
            <param name="eventName">The name of the event being raised.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnMachineAction(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine executes an action.
            </summary>
            <param name="machineId">The id of the machine executing the action.</param>
            <param name="currentStateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnMachineExceptionThrown(Microsoft.PSharp.MachineId,System.String,System.String,System.Exception)">
            <summary>
            Called when a machine throws an exception
            </summary>
            <param name="machineId">The id of the machine that threw the exception.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="currentStateName">The name of the current machine state.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnMachineExceptionHandled(Microsoft.PSharp.MachineId,System.String,System.String,System.Exception)">
            <summary>
            Called when a machine's OnException method is used to handle a thrown exception
            </summary>
            <param name="machineId">The id of the machine that threw the exception.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="currentStateName">The name of the current machine state.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnMonitorState(System.String,Microsoft.PSharp.MachineId,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Called when a monitor enters or exits a state.
            </summary>
            <param name="monitorTypeName">The name of the type of the monitor entering or exiting the state</param>
            <param name="monitorId">The ID of the monitor entering or exiting the state</param>
            <param name="stateName">The name of the state being entered or exited; if <paramref name="isInHotState"/>
                is not null, then the temperature is appended to the statename in brackets, e.g. "stateName[hot]".</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
                else no liveness state is available.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnMonitorEvent(System.String,Microsoft.PSharp.MachineId,System.String,System.String,System.Boolean)">
            <summary>
            Called when a monitor is about to process or has raised an event.
            </summary>
            <param name="monitorTypeName">Name of type of the monitor that will process or has raised the event.</param>
            <param name="monitorId">ID of the monitor that will process or has raised the event</param>
            <param name="currentStateName">The name of the state in which the event is being raised.</param>
            <param name="eventName">The name of the event.</param>
            <param name="isProcessing">If true, the monitor is processing the event; otherwise it has raised it.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnMonitorAction(System.String,Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a monitor executes an action.
            </summary>
            <param name="monitorTypeName">Name of type of the monitor that is executing the action.</param>
            <param name="monitorId">ID of the monitor that is executing the action</param>
            <param name="currentStateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnError(System.String)">
            <summary>
            Called for general error reporting via pre-constructed text.
            </summary>
            <param name="text">The text of the error report.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.OnStrategyError(Microsoft.PSharp.Utilities.SchedulingStrategy,System.String)">
            <summary>
            Called for errors detected by a specific scheduling strategy.
            </summary>
            <param name="strategy">The scheduling strategy that was used.</param>
            <param name="strategyDescription">More information about the scheduling strategy.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.StateMachineLogger.Dispose">
            <summary>
            Disposes the logger.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.IO.Output">
            <summary>
            Static class implementing output methods.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.IO.Output.Logger">
            <summary>
            The underlying logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Output.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Output.Write(System.String)">
            <summary>
             Writes the specified string value to the output stream.
            </summary>
            <param name="value">Text</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.Output.Write(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array
            of objects to the output stream.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Output.WriteLine(System.String)">
            <summary>
            Writes the specified string value, followed by the
            current line terminator, to the output stream.
            </summary>
            <param name="value">Text</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.Output.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array
            of objects, followed by the current line terminator, to
            the output stream.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Output.SetLogger(Microsoft.PSharp.IO.ILogger)">
            <summary>
            Installs the specified logger. If a null logger is provided,
            then the default logger will be installed.
            </summary>
            <param name="logger">ILogger</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.Output.RemoveLogger">
            <summary>
            Replaces the currently installed logger with the default logger.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.IO.Utilities">
            <summary>
            IO utilities.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Utilities.Format(System.String,System.Object[])">
            <summary>
            Formats the given string.
            </summary>
            <param name="value">Text</param>
            <param name="args">Arguments</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PSharp.AbstractMachine">
            <summary>
            Abstract class representing a P# machine.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.AbstractMachine.Runtime">
            <summary>
            The runtime that executes this machine.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.AbstractMachine.Id">
            <summary>
            The unique machine id.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.AbstractMachine.Info">
            <summary>
            Stores machine-related information, which can used
            for scheduling and testing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.AbstractMachine.Initialize(Microsoft.PSharp.PSharpRuntime,Microsoft.PSharp.MachineId,Microsoft.PSharp.MachineInfo)">
            <summary>
            Initializes this machine.
            </summary>
            <param name="runtime">PSharpRuntime</param>
            <param name="mid">MachineId</param>
            <param name="info">MachineInfo</param>
        </member>
        <member name="M:Microsoft.PSharp.AbstractMachine.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal
            to the current System.Object.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Microsoft.PSharp.AbstractMachine.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:Microsoft.PSharp.AbstractMachine.ToString">
            <summary>
            Returns a string that represents the current machine.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.PSharp.AbstractMachine.GetAllStates">
            <summary>
            Returns the set of all states in the machine
            (for code coverage).
            </summary>
            <returns>Set of all states in the machine</returns>
        </member>
        <member name="M:Microsoft.PSharp.AbstractMachine.GetAllStateEventPairs">
            <summary>
            Returns the set of all (states, registered event) pairs in the machine
            (for code coverage).
            </summary>
            <returns>Set of all (states, registered event) pairs in the machine</returns>
        </member>
        <member name="T:Microsoft.PSharp.Cold">
            <summary>
            Attribute for checking liveness properties in monitors.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DeferEvents">
            <summary>
            Attribute for declaring what events should be deferred in
            a machine state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DeferEvents.Events">
            <summary>
            Event types.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DeferEvents.#ctor(System.Type[])">
            <summary>
            Constructor.
            </summary>
            <param name="eventTypes">Event types</param>
        </member>
        <member name="T:Microsoft.PSharp.EntryPoint">
            <summary>
            Attribute for declaring the entry point to a P# program.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Hot">
            <summary>
            Attribute for checking liveness properties in monitors.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.IgnoreEvents">
            <summary>
            Attribute for declaring what events should be ignored in
            a machine state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.IgnoreEvents.Events">
            <summary>
            Event types.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IgnoreEvents.#ctor(System.Type[])">
            <summary>
            Constructor.
            </summary>
            <param name="eventTypes">Event types</param>
        </member>
        <member name="T:Microsoft.PSharp.OnEntry">
            <summary>
            Attribute for declaring what action to perform
            when entering a machine state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.OnEntry.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.OnEntry.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="actionName">Action name</param>
        </member>
        <member name="T:Microsoft.PSharp.OnEventDoAction">
            <summary>
            Attribute for declaring what action a machine should perform
            when it receives an event in a given state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.OnEventDoAction.Event">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.OnEventDoAction.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.OnEventDoAction.#ctor(System.Type,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="eventType">Event type</param>
            <param name="actionName">Action name</param>
        </member>
        <member name="T:Microsoft.PSharp.OnEventGotoState">
            <summary>
            Attribute for declaring which state a machine should transition to
            when it receives an event in a given state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.OnEventGotoState.Event">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.OnEventGotoState.State">
            <summary>
            State type.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.OnEventGotoState.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.OnEventGotoState.#ctor(System.Type,System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="eventType">Event type</param>
            <param name="stateType">State type</param>
        </member>
        <member name="M:Microsoft.PSharp.OnEventGotoState.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="eventType">Event type</param>
            <param name="stateType">State type</param>
            <param name="actionName">Name of action to perform on exit</param>
        </member>
        <member name="T:Microsoft.PSharp.OnEventPushState">
            <summary>
            Attribute for declaring which state a machine should push transition to
            when it receives an event in a given state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.OnEventPushState.Event">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.OnEventPushState.State">
            <summary>
            State type.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.OnEventPushState.#ctor(System.Type,System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="eventType">Event type</param>
            <param name="stateType">State type</param>
        </member>
        <member name="T:Microsoft.PSharp.OnExit">
            <summary>
            Attribute for declaring what action to perform
            when exiting a machine state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.OnExit.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.OnExit.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="actionName">Action name</param>
        </member>
        <member name="T:Microsoft.PSharp.Start">
            <summary>
            Attribute for declaring that a state of a machine
            is the start one.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Test">
            <summary>
            Attribute for declaring the entry point to
            a P# program test.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestInit">
            <summary>
            Attribute for declaring the initialization
            method to be called before testing starts.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestDispose">
            <summary>
            Attribute for declaring a cleanup method to be
            called when all test iterations terminate.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestIterationDispose">
            <summary>
            Attribute for declaring a cleanup method to be
            called when each test iteration terminates.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.ActionBinding">
            <summary>
            Defines an action binding.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.ActionBinding.Name">
            <summary>
            Name of the action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.ActionBinding.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DeferAction">
            <summary>
            Defines a defer action.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.EventActionHandler">
            <summary>
            An abstract event handler.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.EventWaitHandler">
            <summary>
            Defines an event wait handler.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.EventWaitHandler.EventType">
            <summary>
            Type of the event to handle.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.EventWaitHandler.Predicate">
            <summary>
            Handle the event only if the
            predicate evaluates to true.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.EventWaitHandler.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="eventType">Event type</param>
        </member>
        <member name="M:Microsoft.PSharp.EventWaitHandler.#ctor(System.Type,System.Func{Microsoft.PSharp.Event,System.Boolean})">
            <summary>
            Constructor.
            </summary>
            <param name="eventType">Event type</param>
            <param name="predicate">Predicate</param>
        </member>
        <member name="T:Microsoft.PSharp.GotoStateTransition">
            <summary>
            Defines a goto state transition.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.GotoStateTransition.TargetState">
            <summary>
            Target state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.GotoStateTransition.Lambda">
            <summary>
            An optional lambda function, which can execute after
            the default OnExit function of the exiting state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.GotoStateTransition.#ctor(System.Type,System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.GotoStateTransition.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.IgnoreAction">
            <summary>
            Defines a skip action binding (for ignore).
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.PushStateTransition">
            <summary>
            Defines a push state transition.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.PushStateTransition.TargetState">
            <summary>
            Target state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.PushStateTransition.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Default">
            <summary>
            The default event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Default.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Event">
            <summary>
            Abstract class representing an event.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Event.Assert">
            <summary>
            Specifies that there must not be more than k instances
            of e in the input queue of any machine.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Event.Assume">
            <summary>
            Speciﬁes that during testing, an execution that increases
            the cardinality of e beyond k in some queue must not be
            generated.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Event.HashedState">
            <summary> 
            User-defined hash of the event payload. Override to improve the
            accuracy of liveness checking when state-caching is enabled.
            </summary> 
        </member>
        <member name="M:Microsoft.PSharp.Event.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Event.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="assert">Assert</param>
            <param name="assume">Assume</param>
        </member>
        <member name="M:Microsoft.PSharp.Event.SetCardinalityConstraints(System.Int32,System.Int32)">
            <summary>
            Allows override of constructor cardinality constraints.
            </summary>
            <param name="assert">Assert</param>
            <param name="assume">Assume</param>
        </member>
        <member name="T:Microsoft.PSharp.EventInfo">
            <summary>
            Class that contains a P# event, and its
            associated information.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.EventInfo.Event">
            <summary>
            Contained event.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.EventInfo.EventType">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.EventInfo.EventName">
            <summary>
            Event name.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.EventInfo.SendStep">
            <summary>
            The step from which this event was sent.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.EventInfo.OriginInfo">
            <summary>
            Information regarding the event origin.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.EventInfo.OperationGroupId">
            <summary>
            The operation group id associated with this event.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.EventInfo.MustHandle">
            <summary>
            Is this a must-handle event?
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.EventInfo.#ctor(Microsoft.PSharp.Event)">
            <summary>
            Creates a new <see cref="T:Microsoft.PSharp.EventInfo"/>.
            </summary>
            <param name="e">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.EventInfo.#ctor(Microsoft.PSharp.Event,Microsoft.PSharp.EventOriginInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="e">Event</param>
            <param name="originInfo">EventOriginInfo</param>
        </member>
        <member name="M:Microsoft.PSharp.EventInfo.SetOperationGroupId(System.Guid)">
            <summary>
            Sets the operation group id associated with this event.
            </summary>
            <param name="operationGroupId">Operation group id.</param>
        </member>
        <member name="M:Microsoft.PSharp.EventInfo.SetMustHandle(System.Boolean)">
            <summary>
            Sets the MustHandle flag of the event
            </summary>
            <param name="mustHandle">MustHandle flag</param>
        </member>
        <member name="M:Microsoft.PSharp.EventInfo.#ctor(Microsoft.PSharp.Event,Microsoft.PSharp.EventOriginInfo,System.Int32)">
            <summary>
            Construtor.
            </summary>
            <param name="e">Event</param>
            <param name="originInfo">EventOriginInfo</param>
            <param name="sendStep">int</param>
        </member>
        <member name="T:Microsoft.PSharp.EventOriginInfo">
            <summary>
            Class containing origin information
            regarding an event.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.EventOriginInfo.SenderMachineId">
            <summary>
            The sender machine id.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.EventOriginInfo.SenderMachineName">
            <summary>
            The sender machine name.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.EventOriginInfo.SenderStateName">
            <summary>
            The sender machine state name.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.EventOriginInfo.#ctor(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="senderMachineId">Sender machine id</param>
            <param name="senderMachineName">Sender machine name</param>
            <param name="senderStateName">Sender state name</param>
        </member>
        <member name="T:Microsoft.PSharp.GotoStateEvent">
            <summary>
            The goto state event.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.GotoStateEvent.State">
            <summary>
            Type of the state to transition to.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.GotoStateEvent.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="s">Type of the state</param>
        </member>
        <member name="T:Microsoft.PSharp.Halt">
            <summary>
            The halt event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Halt.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.PushStateEvent">
            <summary>
            The push state event.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.PushStateEvent.State">
            <summary>
            Type of the state to transition to.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.PushStateEvent.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="s">Type of the state</param>
        </member>
        <member name="T:Microsoft.PSharp.WildCardEvent">
            <summary>
            The wild card event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.WildCardEvent.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Machine">
            <summary>
            Abstract class representing a state-machine.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.MachineStateCached">
            <summary>
            Is the machine state cached yet?
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.StateTypeMap">
            <summary>
            Map from machine types to a set of all
            possible states types.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.StateMap">
            <summary>
            Map from machine types to a set of all
            available states.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.MachineActionMap">
            <summary>
            Map from machine types to a set of all
            available actions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.StateStack">
            <summary>
            A stack of machine states. The state on the top of
            the stack represents the current state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.ActionHandlerStack">
            <summary>
            A stack of maps that determine event handling action for
            each event type. These maps do not keep transition handlers.
            This stack has always the same height as StateStack.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.GotoTransitions">
            <summary>
            Dictionary containing all the current goto state transitions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.PushTransitions">
            <summary>
            Dictionary containing all the current push state transitions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.ActionMap">
            <summary>
            Map from action names to actions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.Inbox">
            <summary>
            Inbox of the state-machine. Incoming events are
            queued here. Events are dequeued to be processed.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.RaisedEvent">
            <summary>
            Gets the raised event. If no event has been raised
            this will return null.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.EventWaitHandlers">
            <summary>
            A list of event wait handlers. They denote the types of events that
            the machine is currently waiting to arrive. Each handler contains an
            optional predicate and an optional action. If the predicate evaluates
            to false, then the received event is deferred. The optional action
            executes when the event is received.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.ReceiveCompletionSource">
            <summary>
            Completion source that contains the event obtained
            using the receive statement.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.IsRunning">
            <summary>
            Is the machine running.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.IsPopInvoked">
            <summary>
            Is pop invoked in the current action.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Machine.Logger">
            <summary>
            The logger installed to the P# runtime.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Machine.CurrentState">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current state.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Machine.CurrentActionHandlerMap">
            <summary>
            Gets the current action handler map.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Machine.CurrentStateName">
            <summary>
            Gets the name of the current state.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Machine.ReceivedEvent">
            <summary>
            Gets the latest received <see cref="T:Microsoft.PSharp.Event"/>, or null if
            no <see cref="T:Microsoft.PSharp.Event"/> has been received.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Machine.HashedState">
            <summary>
            User-defined hashed state of the machine. Override to improve the
            accuracy of liveness checking when state-caching is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Machine.OperationGroupId">
            <summary>
            Unique id of the group of operations that is
            associated with the next operation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.CreateMachine(System.Type,Microsoft.PSharp.Event)">
            <summary>
            Creates a new machine of the specified type and with the specified
            optional <see cref="T:Microsoft.PSharp.Event"/>. This <see cref="T:Microsoft.PSharp.Event"/> can only be
            used to access its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="e">Event</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.CreateMachine(System.Type,System.String,Microsoft.PSharp.Event)">
            <summary>
            Creates a new machine of the specified type and name, and with the
            specified optional <see cref="T:Microsoft.PSharp.Event"/>. This <see cref="T:Microsoft.PSharp.Event"/> can
            only be used to access its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="friendlyName">Friendly machine name used for logging</param>
            <param name="e">Event</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.CreateMachine(Microsoft.PSharp.MachineId,System.Type,System.String,Microsoft.PSharp.Event)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, using the specified
            unbound machine id, and passes the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event
            can only be used to access its payload, and cannot be handled.
            </summary>
            <param name="mid">Unbound machine id</param>
            <param name="type">Type of the machine</param>
            <param name="friendlyName">Friendly machine name used for logging</param>
            <param name="e">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.CreateRemoteMachine(System.Type,System.String,Microsoft.PSharp.Event)">
            <summary>
            Creates a new remote machine of the specified type and with the specified
            optional <see cref="T:Microsoft.PSharp.Event"/>. This <see cref="T:Microsoft.PSharp.Event"/> can only be used
            to access its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="endpoint">Endpoint</param>
            <param name="e">Event</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.CreateRemoteMachine(System.Type,System.String,System.String,Microsoft.PSharp.Event)">
            <summary>
            Creates a new remote machine of the specified type and name, and with the
            specified optional <see cref="T:Microsoft.PSharp.Event"/>. This <see cref="T:Microsoft.PSharp.Event"/> can only
            be used to access its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="friendlyName">Friendly machine name used for logging</param>
            <param name="endpoint">Endpoint</param>
            <param name="e">Event</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Send(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine.
            </summary>
            <param name="mid">MachineId</param>
            <param name="e">Event</param>
            <param name="options">Optional parameters</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.RemoteSend(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a remote machine.
            </summary>
            <param name="mid">MachineId</param>
            <param name="e">Event</param>
            <param name="options">Optional parameters</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Monitor``1(Microsoft.PSharp.Event)">
            <summary>
            Invokes the specified monitor with the specified <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
            <typeparam name="T">Type of the monitor</typeparam>
            <param name="e">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Monitor(System.Type,Microsoft.PSharp.Event)">
            <summary>
            Invokes the specified monitor with the specified event.
            </summary>
            <param name="type">Type of the monitor</param>
            <param name="e">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Goto``1">
            <summary>
            Transitions the machine to the specified <see cref="T:Microsoft.PSharp.MachineState"/>
            at the end of the current action.
            </summary>
            <typeparam name="S">Type of the state</typeparam>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Goto(System.Type)">
            <summary>
            Transitions the machine to the specified <see cref="T:Microsoft.PSharp.MachineState"/>
            at the end of the current action. Deprecated in favor of Goto&lt;T&gt;().
            </summary>
            <param name="s">Type of the state</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Push``1">
            <summary>
            Transitions the machine to the specified <see cref="T:Microsoft.PSharp.MachineState"/>
            at the end of the current action, pushing current state on the stack.
            </summary>
            <typeparam name="S">Type of the state</typeparam>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Push(System.Type)">
            <summary>
            Transitions the machine to the specified <see cref="T:Microsoft.PSharp.MachineState"/>
            at the end of the current action, pushing current state on the stack. 
            Deprecated in favor of Push&lt;T&gt;().
            </summary>
            <param name="s">Type of the state</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Raise(Microsoft.PSharp.Event)">
            <summary>
            Raises an <see cref="T:Microsoft.PSharp.Event"/> internally at the end of the current action.
            </summary>
            <param name="e">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Receive(System.Type[])">
            <summary>
            Waits to receive an <see cref="T:Microsoft.PSharp.Event"/> of the specified types.
            </summary>
            <param name="eventTypes">Event types</param>
            <returns>Event received</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Receive(System.Type,System.Func{Microsoft.PSharp.Event,System.Boolean})">
            <summary>
            Waits to receive an <see cref="T:Microsoft.PSharp.Event"/> of the specified type
            that satisfies the specified predicate.
            </summary>
            <param name="eventType">Event type</param>
            <param name="predicate">Predicate</param>
            <returns>Event received</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Receive(System.Tuple{System.Type,System.Func{Microsoft.PSharp.Event,System.Boolean}}[])">
            <summary>
            Waits to receive an <see cref="T:Microsoft.PSharp.Event"/> of the specified types
            that satisfy the specified predicates.
            </summary>
            <param name="events">Event types and predicates</param>
            <returns>Event received</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Pop">
            <summary>
            Pops the current <see cref="T:Microsoft.PSharp.MachineState"/> from the state stack
            at the end of the current action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Random">
            <summary>
            Returns a nondeterministic boolean choice, that can be
            controlled during analysis or testing.
            </summary>
            <returns>Boolean</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Random(System.Int32)">
            <summary>
            Returns a nondeterministic boolean choice, that can be
            controlled during analysis or testing. The value is used
            to generate a number in the range [0..maxValue), where 0
            triggers true.
            </summary>
            <param name="maxValue">Max value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.FairRandom(System.String,System.String,System.Int32)">
            <summary>
            Returns a fair nondeterministic boolean choice, that can be
            controlled during analysis or testing.
            </summary>
            <param name="callerMemberName">CallerMemberName</param>
            <param name="callerFilePath">CallerFilePath</param>
            <param name="callerLineNumber">CallerLineNumber</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.RandomInteger(System.Int32)">
            <summary>
            Returns a nondeterministic integer choice, that can be
            controlled during analysis or testing. The value is used
            to generate an integer in the range [0..maxValue).
            </summary>
            <param name="maxValue">Max value</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not it throws
            an <see cref="T:Microsoft.PSharp.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">Predicate</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not it throws
            an <see cref="T:Microsoft.PSharp.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">Predicate</param>
            <param name="s">Message</param>
            <param name="args">Message arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Enqueue(Microsoft.PSharp.EventInfo,System.Boolean@)">
            <summary>
            Enqueues the specified <see cref="T:Microsoft.PSharp.EventInfo"/>.
            </summary>
            <param name="eventInfo">EventInfo</param>
            <param name="runNewHandler">Run a new handler</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.TryDequeueEvent(System.Boolean)">
            <summary>
            Dequeues the next available <see cref="T:Microsoft.PSharp.EventInfo"/> from the
            inbox if there is one available, else returns null.
            </summary>
            <param name="checkOnly">Only check if event can get dequeued, do not modify inbox</param>
            <returns>EventInfo</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.TryGetRaisedEvent">
            <summary>
            Returns the raised <see cref="T:Microsoft.PSharp.EventInfo"/> if
            there is one available, else returns null.
            </summary>
            <returns>EventInfo</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.GetDefaultEvent">
            <summary>
            Returns the default <see cref="T:Microsoft.PSharp.EventInfo"/>.
            </summary>
            <returns>EventInfo</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.RunEventHandler">
            <summary>
            Runs the event handler. The handler terminates if there
            is no next event to process or if the machine is halted.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.HandleEvent(Microsoft.PSharp.Event)">
            <summary>
            Handles the specified <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
            <param name="e">Event to handle</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Do(System.String)">
            <summary>
            Invokes an action.
            </summary>
            <param name="actionName">Action name</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.ExecuteCurrentStateOnEntry">
            <summary>
            Executes the on entry function of the current state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.ExecuteCurrentStateOnExit(System.String)">
            <summary>
            Executes the on exit function of the current state.
            </summary>
            <param name="eventHandlerExitActionName">Action name</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.InvokeOnFailureExceptionFilter(Microsoft.PSharp.CachedAction,System.Exception)">
            <summary>
            An exception filter that calls OnFailure, which can choose to fast-fail the app
            to get a full dump.
            </summary>
            <param name="ex">The exception being tested</param>
            <param name="action">The machine action being executed when the failure occurred</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.ExecuteAction(Microsoft.PSharp.CachedAction)">
            <summary>
            Executes the specified action.
            </summary>
            <param name="cachedAction">The cached methodInfo and corresponding delegate</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.GotoState(System.Type,System.String)">
            <summary>
            Performs a goto transition to the specified state.
            </summary>
            <param name="s">Type of the state</param>
            <param name="onExitActionName">Action name</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.PushState(System.Type)">
            <summary>
            Performs a push transition to the specified state.
            </summary>
            <param name="s">Type of the state</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.PopState">
            <summary>
            Performs a pop transition from the current state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.DoStatePush(Microsoft.PSharp.MachineState)">
            <summary>
            Configures the state transitions of the machine
            when a state is pushed on to the stack.
            </summary>
            <param name="state">State that is to be pushed on to the top of the stack</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.DoStatePop">
            <summary>
            Configures the state transitions of the machine
            when a state is popped.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.WaitOnEvent">
            <summary>
            Waits for an event to arrive.
            </summary>
            <returns>Event received</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.IsIgnored(System.Type)">
            <summary>
            Checks if the machine ignores the specified event.
            </summary>
            <param name="e">Event type</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.IsDeferred(System.Type)">
            <summary>
            Checks if the machine defers the specified event.
            </summary>
            <param name="e">Event type</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.HasDefaultHandler">
            <summary>
            Checks if the machine has a default handler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.GetCachedState">
            <summary>
            Returns the cached state of this machine.
            </summary>
            <returns>Hash value</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.GotoStartState(Microsoft.PSharp.Event)">
            <summary>
            Transitions to the start state, and executes the
            entry action, if there is any.
            </summary>
            <param name="e">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.InitializeStateInformation">
            <summary>
            Initializes information about the states of the machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.GetEventWaitHandlerNames">
            <summary>
            Returns the names of the events that the machine
            is waiting to receive. This is not thread safe.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.GetStateTypeAtStackIndex(System.Int32)">
            <summary>
            Returns the type of the state at the specified state
            stack index, if there is one.
            </summary>
            <param name="index">State stack index</param>
            <returns>Type</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.ExtractStateTypes(System.Type)">
            <summary>
            Processes a type, looking for machine states.
            </summary>
            <param name="type">Type</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.GetActionWithName(System.String)">
            <summary>
            Returns the action with the specified name.
            </summary>
            <param name="actionName">Action name</param>
            <returns>MethodInfo</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.GetAllStates">
            <summary>
            Returns the set of all states in the machine
            (for code coverage).
            </summary>
            <returns>Set of all states in the machine</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.GetAllStateEventPairs">
            <summary>
            Returns the set of all (states, registered event) pairs in the machine
            (for code coverage).
            </summary>
            <returns>Set of all (states, registered event) pairs in the machine</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.AssertStateValidity">
            <summary>
            Check machine for state related errors.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.ReportUnhandledException(System.Exception,System.String)">
            <summary>
            Wraps the unhandled exception inside an <see cref="T:Microsoft.PSharp.AssertionFailureException"/>
            exception, and throws it to the user.
            </summary>
            <param name="ex">Exception</param>
            <param name="actionName">Action name</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.OnExceptionHandler(System.String,System.Exception)">
            <summary>
            Invokes user callback when a machine throws an exception.
            </summary>
            <param name="ex">The exception thrown by the machine</param>
            <param name="methodName">The handler (outermost) that threw the exception</param>
            <returns>False if the exception should continue to get thrown, true if it was handled in this method</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.OnException(System.String,System.Exception)">
            <summary>
            User callback when a machine throws an exception.
            </summary>
            <param name="ex">The exception thrown by the machine</param>
            <param name="methodName">The handler (outermost) that threw the exception</param>
            <returns>False if the exception should continue to get thrown, true if it was handled in this method</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.ResetCaches">
            <summary>
            Resets the static caches.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.CleanUpResources">
            <summary>
            Cleans up resources at machine termination.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.OnHalt">
            <summary>
            User callback when a machine halts.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.MachineFactory">
            <summary>
            Factory for creating P# machines.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineFactory.MachineConstructorCache">
            <summary>
            Cache storing machine constructors.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineFactory.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineFactory.Create(System.Type)">
            <summary>
            Creates a new P# machine of the specified type.
            </summary>
            <param name="type">Type</param>
            <returns>Machine</returns>
        </member>
        <member name="M:Microsoft.PSharp.MachineFactory.IsCached(System.Type)">
            <summary>
            Checks if the constructor of the specified machine type exists in the cache.
            </summary>
            <param name="type">Type</param>
            <returns>Boolean</returns>
        </member>
        <member name="T:Microsoft.PSharp.MachineId">
            <summary>
            Unique machine id.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MachineId.Runtime">
            <summary>
            The P# runtime that executes the machine with this id.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineId.Name">
            <summary>
            Name of the machine.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineId.FriendlyName">
            <summary>
            Optional friendly name of the machine.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineId.Type">
            <summary>
            Type of the machine with this id.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineId.Value">
            <summary>
            Unique id value.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineId.Generation">
            <summary>
            Generation of the runtime that created this machine id.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineId.Endpoint">
            <summary>
            Endpoint.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineId.#ctor(System.Type,System.String,Microsoft.PSharp.PSharpRuntime)">
            <summary>
            Creates a new machine id.
            </summary>
            <param name="type">Machine type</param>
            <param name="friendlyName">Friendly machine name</param>
            <param name="runtime">PSharpRuntime</param>
        </member>
        <member name="M:Microsoft.PSharp.MachineId.#ctor(Microsoft.PSharp.MachineId)">
            <summary>
            Create a fresh MachineId borrowing information from a given id.
            </summary>
            <param name="mid">MachineId</param>
        </member>
        <member name="M:Microsoft.PSharp.MachineId.Bind(Microsoft.PSharp.PSharpRuntime)">
            <summary>
            Bind the machine id.
            </summary>
            <param name="runtime">PSharpRuntime</param>
        </member>
        <member name="M:Microsoft.PSharp.MachineId.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal
            to the current System.Object.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Microsoft.PSharp.MachineId.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:Microsoft.PSharp.MachineId.ToString">
            <summary>
            Returns a string that represents the current machine id.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Microsoft.PSharp.MachineInfo">
            <summary>
            Stores machine-related information, which can used
            for scheduling and testing.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineInfo.MachineId">
            <summary>
            Unique id of the machine.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineInfo.IsHalted">
            <summary>
            Is the machine halted.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineInfo.IsWaitingToReceive">
            <summary>
            Is the machine waiting to receive an event.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineInfo.IsInsideOnExit">
            <summary>
            Checks if the machine is executing an OnExit method.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineInfo.CurrentActionCalledTransitionStatement">
            <summary>
            Checks if the current action called a transition statement.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineInfo.OperationGroupId">
            <summary>
            Unique id of the group of operations that the
            machine is currently executing.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineInfo.ProgramCounter">
            <summary>
            Program counter used for state-caching. Distinguishes
            scheduling from non-deterministic choices.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MachineInfo.Id">
            <summary>
            Unique id of the machine.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MachineInfo.Name">
            <summary>
            Name of the machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineInfo.#ctor(Microsoft.PSharp.MachineId)">
            <summary>
            Constructor.
            </summary>
            <param name="mid">MachineId</param>
        </member>
        <member name="M:Microsoft.PSharp.MachineInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal
            to the current System.Object.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Microsoft.PSharp.MachineInfo.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:Microsoft.PSharp.MachineInfo.ToString">
            <summary>
            Returns a string that represents this machine.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Microsoft.PSharp.MachineState">
            <summary>
            Abstract class representing a state of a P# machine.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MachineState.EntryAction">
            <summary>
            The entry action of the state.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MachineState.ExitAction">
            <summary>
            The exit action of the state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineState.GotoTransitions">
            <summary>
            Dictionary containing all the goto state transitions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineState.PushTransitions">
            <summary>
            Dictionary containing all the push state transitions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineState.ActionBindings">
            <summary>
            Dictionary containing all the action bindings.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineState.IgnoredEvents">
            <summary>
            Set of ignored event types.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineState.DeferredEvents">
            <summary>
            Set of deferred event types.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MachineState.IsStart">
            <summary>
            True if this is the start state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InitializeState">
            <summary>
            Initializes the state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InstallGotoTransitions(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares goto event handlers, if there are any.
            </summary>
            <param name="handledEvents">Set of handled events.</param>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InheritGotoTransitions(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits goto event handlers from a base state, if there is one.
            </summary>
            <param name="baseState">Base state.</param>
            <param name="handledEvents">Set of handled events.</param>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InstallPushTransitions(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares push event handlers, if there are any.
            </summary>
            <param name="handledEvents">Set of handled events.</param>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InheritPushTransitions(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits push event handlers from a base state, if there is one.
            </summary>
            <param name="baseState">Base state.</param>
            <param name="handledEvents">Set of handled events.</param>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InstallActionHandlers(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares action event handlers, if there are any.
            </summary>
            <param name="handledEvents">Set of handled events.</param>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InheritActionHandlers(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits action event handlers from a base state, if there is one.
            </summary>
            <param name="baseState">Base state.</param>
            <param name="handledEvents">Set of handled events.</param>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InstallIgnoreHandlers(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares ignore event handlers, if there are any.
            </summary>
            <param name="handledEvents">Set of handled events.</param>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InheritIgnoreHandlers(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits ignore event handlers from a base state, if there is one.
            </summary>
            <param name="baseState">Base state.</param>
            <param name="handledEvents">Set of handled events.</param>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InstallDeferHandlers(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares defer event handlers, if there are any.
            </summary>
            <param name="handledEvents">Set of handled events.</param>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InheritDeferHandlers(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits defer event handlers from a base state, if there is one.
            </summary>
            <param name="baseState">Base state.</param>
            <param name="handledEvents">Set of handled events.</param>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.CheckEventHandlerAlreadyDeclared(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Checks if an event handler has been already declared.
            </summary>
            <param name="e">Event.</param>
            <param name="handledEvents">Set of handled events.</param>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.CheckEventHandlerAlreadyInherited(System.Type,System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Checks if an event handler has been already inherited.
            </summary>
            <param name="e">Event.</param>
            <param name="baseState">Base state.</param>
            <param name="handledEvents">Set of handled events.</param>
        </member>
        <member name="T:Microsoft.PSharp.Monitor">
            <summary>
            Abstract class representing a P# monitor.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.StateTypeMap">
            <summary>
            Map from monitor types to a set of all
            possible states types.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.StateMap">
            <summary>
            Map from monitor types to a set of all
            available states.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.MonitorActionMap">
            <summary>
            Map from monitor types to a set of all
            available actions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.Runtime">
            <summary>
            The runtime that executes this monitor.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.State">
            <summary>
            The monitor state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.GotoTransitions">
            <summary>
            Dictionary containing all the current goto state transitions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.ActionBindings">
            <summary>
            Dictionary containing all the current action bindings.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.ActionMap">
            <summary>
            Map from action names to actions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.IgnoredEvents">
            <summary>
            Set of currently ignored event types.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.LivenessTemperature">
            <summary>
            A counter that increases in each step of the execution,
            as long as the monitor remains in a hot state. If the
            temperature reaches the specified limit, then a potential
            liveness bug has been found.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.IsInsideOnExit">
            <summary>
            Checks if the monitor is executing an OnExit method.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.CurrentActionCalledTransitionStatement">
            <summary>
            Checks if the current action called a transition statement.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Monitor.Id">
            <summary>
            The unique monitor id.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Monitor.Name">
            <summary>
            Gets the name of this monitor.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Monitor.Logger">
            <summary>
            The logger installed to the P# runtime.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Monitor.CurrentState">
            <summary>
            Gets the current state.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Monitor.CurrentStateName">
            <summary>
            Gets the current state name.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Monitor.CurrentStateNameWithTemperature">
            <summary>
            Gets the current state name with temperature.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.GetHotState">
            <summary>
            Returns a nullable boolean indicating liveness temperature: true for hot, false for cold, else null.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Monitor.ReceivedEvent">
            <summary>
            Gets the latest received event, or null if no event
            has been received.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.Initialize(Microsoft.PSharp.MachineId)">
            <summary>
            Initializes this monitor.
            </summary>
            <param name="mid">MachineId</param>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.Goto``1">
            <summary>
            Returns from the execution context, and transitions
            the monitor to the given <see cref="T:Microsoft.PSharp.MonitorState"/>.
            </summary>
            <typeparam name="S">Type of the state</typeparam>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.Goto(System.Type)">
            <summary>
            Returns from the execution context, and transitions
            the monitor to the given <see cref="T:Microsoft.PSharp.MonitorState"/>.
            Deprecated in favor of Goto&lt;T&gt;().
            </summary>
            <param name="s">Type of the state</param>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.Raise(Microsoft.PSharp.Event)">
            <summary>
            Raises an <see cref="T:Microsoft.PSharp.Event"/> internally and returns from the execution context.
            </summary>
            <param name="e">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not it throws
            an <see cref="T:Microsoft.PSharp.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">Predicate</param>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not it throws
            an <see cref="T:Microsoft.PSharp.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">Predicate</param>
            <param name="s">Message</param>
            <param name="args">Message arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.MonitorEvent(Microsoft.PSharp.Event)">
            <summary>
            Notifies the monitor to handle the received event.
            </summary>
            <param name="e">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.HandleEvent(Microsoft.PSharp.Event)">
            <summary>
            Handles the given event.
            </summary>
            <param name="e">Event to handle</param>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.Do(System.String)">
            <summary>
            Invokes an action.
            </summary>
            <param name="actionName">Action name</param>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.ExecuteCurrentStateOnEntry">
            <summary>
            Executes the on entry function of the current state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.ExecuteCurrentStateOnExit(System.String)">
            <summary>
            Executes the on exit function of the current state.
            </summary>
            <param name="eventHandlerExitActionName">Action name</param>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.ExecuteAction(System.Reflection.MethodInfo)">
            <summary>
            Executes the specified action.
            </summary>
            <param name="action">MethodInfo</param>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.GotoState(System.Type,System.String)">
            <summary>
            Performs a goto transition to the given state.
            </summary>
            <param name="s">Type of the state</param>
            <param name="onExitActionName">Action name</param>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.CanHandleEvent(System.Type)">
            <summary>
            Checks if the state can handle the given event type. An event
            can be handled if it is deferred, or leads to a transition or
            action binding.
            </summary>
            <param name="e">Event type</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.HasDefaultHandler">
            <summary>
            Checks if the state has a default handler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.CheckLivenessTemperature">
            <summary>
            Checks the liveness temperature of the monitor and report
            a potential liveness bug if the temperature passes the
            specified threshold. Only works in a liveness monitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.CheckLivenessTemperature(System.Int32)">
            <summary>
            Checks the liveness temperature of the monitor and report
            a potential liveness bug if the temperature passes the
            specified threshold. Only works in a liveness monitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.IsInHotState">
            <summary>
            Returns true if the monitor is in a hot state.
            </summary>
            <returns>Boolean</returns>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.IsInHotState(System.String@)">
            <summary>
            Returns true if the monitor is in a hot state. Also outputs
            the name of the current state.
            </summary>
            <param name="stateName">State name</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.IsInColdState">
            <summary>
            Returns true if the monitor is in a cold state.
            </summary>
            <returns>Boolean</returns>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.IsInColdState(System.String@)">
            <summary>
            Returns true if the monitor is in a cold state. Also outputs
            the name of the current state.
            </summary>
            <param name="stateName">State name</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.GetHashedState">
            <summary>
            Returns the hashed state of this monitor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.GetCachedState">
            <summary>
            Returns the cached state of this monitor.
            </summary>
            <returns>Hash value</returns>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.ToString">
            <summary>
            Returns a string that represents the current monitor.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.GotoStartState">
            <summary>
            Transitions to the start state, and executes the
            entry action, if there is any.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.InitializeStateInformation">
            <summary>
            Initializes information about the states of the monitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.ExtractStateTypes(System.Type)">
            <summary>
            Processes a type, looking for monitor states.
            </summary>
            <param name="type">Type</param>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.ConfigureStateTransitions(Microsoft.PSharp.MonitorState)">
            <summary>
            Configures the state transitions of the monitor.
            </summary>
            <param name="state">State</param>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.GetActionWithName(System.String)">
            <summary>
            Returns the action with the specified name.
            </summary>
            <param name="actionName">Action name</param>
            <returns>Action</returns>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.AssertStateValidity">
            <summary>
            Check monitor for state related errors.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.ReportUnhandledException(System.Exception,System.String)">
            <summary>
            Wraps the unhandled exception inside an <see cref="T:Microsoft.PSharp.AssertionFailureException"/>
            exception, and throws it to the user.
            </summary>
            <param name="ex">Exception</param>
            <param name="actionName">Action name</param>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.GetAllStates">
            <summary>
            Returns the set of all states in the monitor
            (for code coverage).
            </summary>
            <returns>Set of all states in the monitor</returns>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.GetAllStateEventPairs">
            <summary>
            Returns the set of all (states, registered event) pairs in the monitor
            (for code coverage).
            </summary>
            <returns>Set of all (states, registered event) pairs in the monitor</returns>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.ResetCaches">
            <summary>
            Resets the static caches.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.MonitorState">
            <summary>
            Abstract class representing a state of a P# monitor.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MonitorState.EntryAction">
            <summary>
            The entry action of the state.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MonitorState.ExitAction">
            <summary>
            The exit action of the state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MonitorState.GotoTransitions">
            <summary>
            Dictionary containing all the goto state transitions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MonitorState.ActionBindings">
            <summary>
            Dictionary containing all the action bindings.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MonitorState.IgnoredEvents">
            <summary>
            Set of ignored event types.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MonitorState.IsStart">
            <summary>
            True if this is the start state.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MonitorState.IsHot">
            <summary>
            Returns true if this is a hot state.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MonitorState.IsCold">
            <summary>
            Returns true if this is a cold state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MonitorState.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MonitorState.InitializeState">
            <summary>
            Initializes the state.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.SendOptions">
            <summary>
            Optional parameters for a send operation.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.SendOptions.OperationGroupId">
            <summary>
            Operation group id.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.SendOptions.MustHandle">
            <summary>
            Is this a MustHandle event?
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.SendOptions.#ctor">
            <summary>
            Default options.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.SendOptions.ToString">
            <summary>
            A string that represents the current options.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.SendOptions.op_Implicit(System.Guid)~Microsoft.PSharp.SendOptions">
            <summary>
            Implicit conversion from a Guid.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.SingleStateMachine">
            <summary>
            Abstract class representing a single-state machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.SingleStateMachine._InitOnEntry">
            <summary>
            Initilizes the state machine on creation
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.SingleStateMachine.InitOnEntry(Microsoft.PSharp.Event)">
            <summary>
            Initilizes the state machine on creation
            </summary>
            <param name="e">Initial event provided on machine creation, or null otherwise</param>
        </member>
        <member name="M:Microsoft.PSharp.SingleStateMachine._ProcessEvent">
            <summary>
            Process incoming event
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.SingleStateMachine.ProcessEvent(Microsoft.PSharp.Event)">
            <summary>
            Process incoming event
            </summary>
            <param name="e">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.SingleStateMachine.TerminatingOnEntry">
            <summary>
            Halts the machine
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.StateGroup">
            <summary>
            Abstract class used for representing a
            group of related states.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.StateGroup.GetQualifiedStateName(System.Type)">
            <summary>
            Returns the qualified (MachineGroup) name of a MachineState
            </summary>
            <param name="state">State</param>
            <returns>Qualified state name</returns>
        </member>
        <member name="T:Microsoft.PSharp.Net.INetworkProvider">
            <summary>
            Interface for a P# network provider.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Net.INetworkProvider.RemoteCreateMachine(System.Type,System.String,System.String,Microsoft.PSharp.Event)">
            <summary>
            Creates a new remote machine of the specified type
            and with the specified event. An optional friendly
            name can be specified. If the friendly name is null
            or the empty string, a default value will be given.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="friendlyName">Friendly machine name used for logging</param>
            <param name="endpoint">Endpoint</param>
            <param name="e">Event</param>
            <returns>MachineId</returns> 
        </member>
        <member name="M:Microsoft.PSharp.Net.INetworkProvider.RemoteSend(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event)">
            <summary>
            Sends an event to a remote machine.
            </summary>
            <param name="target">Target machine id</param>
            <param name="e">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.Net.INetworkProvider.GetLocalEndpoint">
            <summary>
            Returns the local endpoint.
            </summary>
            <returns>Endpoint</returns>
        </member>
        <member name="T:Microsoft.PSharp.Net.LocalNetworkProvider">
            <summary>
            The local P# network provider.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Net.LocalNetworkProvider.Runtime">
            <summary>
            Instance of the P# runtime.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Net.LocalNetworkProvider.LocalEndpoint">
            <summary>
            The local endpoint.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Net.LocalNetworkProvider.#ctor(Microsoft.PSharp.PSharpRuntime)">
            <summary>
            Constructor.
            </summary>
            <param name="runtime">PSharpRuntime</param>
        </member>
        <member name="M:Microsoft.PSharp.Net.LocalNetworkProvider.Microsoft#PSharp#Net#INetworkProvider#RemoteCreateMachine(System.Type,System.String,System.String,Microsoft.PSharp.Event)">
            <summary>
            Creates a new remote machine of the specified type
            and with the specified event. An optional friendly
            name can be specified. If the friendly name is null
            or the empty string, a default value will be given.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="friendlyName">Friendly machine name used for logging</param>
            <param name="endpoint">Endpoint</param>
            <param name="e">Event</param>
            <returns>MachineId</returns> 
        </member>
        <member name="M:Microsoft.PSharp.Net.LocalNetworkProvider.Microsoft#PSharp#Net#INetworkProvider#RemoteSend(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event)">
            <summary>
            Sends an asynchronous event to a machine.
            </summary>
            <param name="target">Target machine id</param>
            <param name="e">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.Net.LocalNetworkProvider.Microsoft#PSharp#Net#INetworkProvider#GetLocalEndpoint">
            <summary>
            Returns the local endpoint.
            </summary>
            <returns>Endpoint</returns>
        </member>
        <member name="M:Microsoft.PSharp.Net.LocalNetworkProvider.Dispose">
            <summary>
            Disposes the network provider.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.AssertionFailureException">
            <summary>
            The exception that is thrown by the P# runtime upon assertion failure.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.AssertionFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:Microsoft.PSharp.AssertionFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception.
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Microsoft.PSharp.ExecutionCanceledException">
            <summary>
            The exception that is thrown in a P# machine upon cancellation
            of execution by the P# runtime.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.ExecutionCanceledException.#ctor">
            <summary>
            Initializes a new instance of the exception.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.MachineActionExceptionFilterException">
            <summary>
            The exception that is thrown by the P# runtime upon a machine action failure.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineActionExceptionFilterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:Microsoft.PSharp.MachineActionExceptionFilterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception.
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Microsoft.PSharp.RuntimeException">
            <summary>
            An exception that is thrown by the P# runtime.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.RuntimeException.#ctor">
            <summary>
            Initializes a new instance of the exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.RuntimeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:Microsoft.PSharp.RuntimeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception.
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Microsoft.PSharp.PSharpRuntime">
            <summary>
            Runtime for executing state-machines.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.PSharpRuntime.Configuration">
            <summary>
            The configuration used by the runtime.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.PSharpRuntime.MachineIdCounter">
            <summary>
            Monotonically increasing machine id counter.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.PSharpRuntime.IsRunning">
            <summary>
            Records if the runtime is running.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.PSharpRuntime.MachineMap">
            <summary>
            Map from unique machine ids to machines.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.PSharpRuntime.NetworkProvider">
            <summary>
            Network provider used for remote communication.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.PSharpRuntime.Logger">
            <summary>
            The installed logger.
            </summary>
        </member>
        <member name="E:Microsoft.PSharp.PSharpRuntime.OnFailure">
            <summary>
            Event that is fired when the P# program throws an exception.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.PSharpRuntime.OnFailureHandler">
            <summary>
            Handles the <see cref="E:Microsoft.PSharp.PSharpRuntime.OnFailure"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.Create">
            <summary>
            Creates a new state-machine runtime.
            </summary>
            <returns>Runtime</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.Create(Microsoft.PSharp.Configuration)">
            <summary>
            Creates a new state-machine runtime with the specified
            <see cref="T:Microsoft.PSharp.Configuration"/>.
            </summary>
            <param name="configuration">Configuration</param>
            <returns>Runtime</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.#ctor(Microsoft.PSharp.Configuration)">
            <summary>
            Constructor.
            </summary>
            <param name="configuration">Configuration</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.Initialize">
            <summary>
            Initializes various components of the runtime.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.CreateMachineId(System.Type,System.String)">
            <summary>
            Creates a fresh machine id that has not yet been bound to any machine.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="friendlyName">Friendly machine name used for logging</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.CreateMachine(System.Type,Microsoft.PSharp.Event,System.Nullable{System.Guid})">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be
            used to access its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="e">Event</param>
            <param name="operationGroupId">Optional operation group id</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.CreateMachine(Microsoft.PSharp.MachineId,System.Type,Microsoft.PSharp.Event,System.Nullable{System.Guid})">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/>, using the specified
            machine id, and passes the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This
            event can only be used to access its payload, and cannot be handled.
            </summary>
            <param name="mid">Unbound machine id</param>
            <param name="type">Type of the machine</param>
            <param name="e">Event</param>
            <param name="operationGroupId">Optional operation group id</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.CreateMachine(System.Type,System.String,Microsoft.PSharp.Event,System.Nullable{System.Guid})">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, and
            with the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be
            used to access its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="friendlyName">Friendly machine name used for logging</param>
            <param name="operationGroupId">Optional operation group id</param>
            <param name="e">Event</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.CreateMachineAndExecute(System.Type,Microsoft.PSharp.Event,System.Nullable{System.Guid})">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and with the
            specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when
            the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="e">Event</param>
            <param name="operationGroupId">Optional operation group id</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.CreateMachineAndExecute(Microsoft.PSharp.MachineId,System.Type,Microsoft.PSharp.Event,System.Nullable{System.Guid})">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/>, using the specified
            unbound machine id, and passes the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This
            event can only be used to access its payload, and cannot be handled. The method
            returns only when the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any)
            is handled.
            </summary>
            <param name="mid">Unbound machine id</param>
            <param name="type">Type of the machine</param>
            <param name="e">Event</param>
            <param name="operationGroupId">Optional operation group id</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.CreateMachineAndExecute(System.Type,System.String,Microsoft.PSharp.Event,System.Nullable{System.Guid})">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when the
            machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="friendlyName">Friendly machine name used for logging</param>
            <param name="operationGroupId">Optional operation group id</param>
            <param name="e">Event</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.RemoteCreateMachine(System.Type,System.String,Microsoft.PSharp.Event,System.Nullable{System.Guid})">
            <summary>
            Creates a new remote machine of the specified <see cref="T:System.Type"/> and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used
            to access its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="endpoint">Endpoint</param>
            <param name="operationGroupId">Optional operation group id</param>
            <param name="e">Event</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.RemoteCreateMachine(System.Type,System.String,System.String,Microsoft.PSharp.Event,System.Nullable{System.Guid})">
            <summary>
            Creates a new remote machine of the specified <see cref="T:System.Type"/> and name, and
            with the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used
            to access its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="friendlyName">Friendly machine name used for logging</param>
            <param name="endpoint">Endpoint</param>
            <param name="operationGroupId">Optional operation group id</param>
            <param name="e">Event</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.SendEvent(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine.
            </summary>
            <param name="target">Target machine id</param>
            <param name="e">Event</param>
            <param name="options">Optional parameters of a send operation.</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.SendEventAndExecute(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an <see cref="T:Microsoft.PSharp.Event"/> to a machine. Returns immediately
            if the target machine was already running. Otherwise blocks until the machine handles
            the event and reaches quiescense again.
            </summary>
            <param name="target">Target machine id</param>
            <param name="e">Event</param>
            <param name="options">Optional parameters of a send operation.</param>
            <returns>True if event was handled, false if the event was only enqueued</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.RemoteSendEvent(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a remote machine.
            </summary>
            <param name="target">Target machine id</param>
            <param name="e">Event</param>
            <param name="options">Optional parameters of a send operation.</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.RegisterMonitor(System.Type)">
            <summary>
            Registers a new specification monitor of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">Type of the monitor</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.InvokeMonitor``1(Microsoft.PSharp.Event)">
            <summary>
            Invokes the specified monitor with the specified <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
            <typeparam name="T">Type of the monitor</typeparam>
            <param name="e">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.InvokeMonitor(System.Type,Microsoft.PSharp.Event)">
            <summary>
            Invokes the specified monitor with the specified <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
            <param name="type">Type of the monitor</param>
            <param name="e">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.Random">
            <summary>
            Returns a nondeterministic boolean choice, that can be controlled
            during analysis or testing.
            </summary>
            <returns>Boolean</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.Random(System.Int32)">
            <summary>
            Returns a nondeterministic boolean choice, that can be controlled
            during analysis or testing. The value is used to generate a number
            in the range [0..maxValue), where 0 triggers true.
            </summary>
            <param name="maxValue">Max value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.RandomInteger(System.Int32)">
            <summary>
            Returns a nondeterministic integer choice, that can be
            controlled during analysis or testing. The value is used
            to generate an integer in the range [0..maxValue).
            </summary>
            <param name="maxValue">Max value</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.GetCurrentOperationGroupId(Microsoft.PSharp.MachineId)">
            <summary>
            Returns the operation group id of the specified machine. During testing,
            the runtime asserts that the specified machine is currently executing.
            </summary>
            <param name="currentMachine">MachineId of the currently executing machine.</param>
            <returns>Guid</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.Stop">
            <summary>
            Notifies each active machine to halt execution to allow the runtime
            to reach quiescence. This is an experimental feature, which should
            be used only for testing purposes.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.GetTargetMachine(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.AbstractMachine,System.Guid,Microsoft.PSharp.Machine@)">
            <summary>
            Gets the target machine for an event; if not found, logs a halted-machine entry.
            </summary>
            <param name="targetMachineId">The id of target machine.</param>
            <param name="e">The event that will be sent.</param>
            <param name="sender">The machine that is sending the event.</param>
            <param name="operationGroupId">The operation group id.</param>
            <param name="targetMachine">Receives the target machine, if found.</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.CreateMachine(Microsoft.PSharp.MachineId,System.Type,System.String,Microsoft.PSharp.Event,Microsoft.PSharp.Machine,System.Nullable{System.Guid})">
            <summary>
            Creates a new <see cref="T:Microsoft.PSharp.Machine"/> of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="mid">Unbound machine id</param>
            <param name="type">Type of the machine</param>
            <param name="friendlyName">Friendly machine name used for logging</param>
            <param name="operationGroupId">Operation group id</param>
            <param name="e">Event passed during machine construction</param>
            <param name="creator">Creator machine</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.CreateMachineAndExecute(Microsoft.PSharp.MachineId,System.Type,System.String,Microsoft.PSharp.Event,Microsoft.PSharp.Machine,System.Nullable{System.Guid})">
            <summary>
            Creates a new <see cref="T:Microsoft.PSharp.Machine"/> of the specified <see cref="T:System.Type"/>. The
            method returns only when the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/>
            (if any) is handled.
            </summary>
            <param name="mid">Unbound machine id</param>
            <param name="type">Type of the machine</param>
            <param name="friendlyName">Friendly machine name used for logging</param>
            <param name="e">Event passed during machine construction</param>
            <param name="operationGroupId">Operation group id</param>
            <param name="creator">Creator machine</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.CreateRemoteMachine(System.Type,System.String,System.String,Microsoft.PSharp.Event,Microsoft.PSharp.Machine,System.Nullable{System.Guid})">
            <summary>
            Creates a new remote <see cref="T:Microsoft.PSharp.Machine"/> of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="friendlyName">Friendly machine name used for logging</param>
            <param name="endpoint">Endpoint</param>
            <param name="operationGroupId">Operation group id</param>
            <param name="e">Event passed during machine construction</param>
            <param name="creator">Creator machine</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.SendEvent(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.AbstractMachine,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine.
            </summary>
            <param name="mid">MachineId</param>
            <param name="e">Event</param>
            <param name="sender">Sender machine</param>
            <param name="options">Optional parameters of a send operation.</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.SendEventAndExecute(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.AbstractMachine,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine. Returns immediately
            if the target machine was already running. Otherwise blocks until the machine handles
            the event and reaches quiescense again.
            </summary>
            <param name="mid">MachineId</param>
            <param name="e">Event</param>
            <param name="sender">Sender machine</param>
            <param name="options">Optional parameters of a send operation.</param>
            <returns>True if event was handled, false if the event was only enqueued</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.SendEventRemotely(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.AbstractMachine,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a remote machine.
            </summary>
            <param name="mid">MachineId</param>
            <param name="e">Event</param>
            <param name="sender">Sender machine</param>
            <param name="options">Optional parameters of a send operation.</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.CheckStartEventHandler(Microsoft.PSharp.Machine)">
            <summary>
            Checks that a machine can start its event handler. Returns false if the event
            handler should not be started.
            </summary>
            <param name="machine">Machine</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.TryCreateMonitor(System.Type)">
            <summary>
            Tries to create a new <see cref="T:Microsoft.PSharp.Monitor"/> of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">Type of the monitor</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.Monitor(System.Type,Microsoft.PSharp.AbstractMachine,Microsoft.PSharp.Event)">
            <summary>
            Invokes the specified <see cref="T:Microsoft.PSharp.Monitor"/> with the specified <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
            <param name="sender">Sender machine</param>
            <param name="type">Type of the monitor</param>
            <param name="e">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not it throws an
            <see cref="T:Microsoft.PSharp.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">Predicate</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not it throws an
            <see cref="T:Microsoft.PSharp.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">Predicate</param>
            <param name="s">Message</param>
            <param name="args">Message arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.GetNondeterministicBooleanChoice(Microsoft.PSharp.AbstractMachine,System.Int32)">
            <summary>
            Returns a nondeterministic boolean choice, that can be
            controlled during analysis or testing.
            </summary>
            <param name="machine">Machine</param>
            <param name="maxValue">Max value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.GetFairNondeterministicBooleanChoice(Microsoft.PSharp.AbstractMachine,System.String)">
            <summary>
            Returns a fair nondeterministic boolean choice, that can be
            controlled during analysis or testing.
            </summary>
            <param name="machine">Machine</param>
            <param name="uniqueId">Unique id</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.GetNondeterministicIntegerChoice(Microsoft.PSharp.AbstractMachine,System.Int32)">
            <summary>
            Returns a nondeterministic integer choice, that can be
            controlled during analysis or testing.
            </summary>
            <param name="machine">Machine</param>
            <param name="maxValue">Max value</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.NotifyEnteredState(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine entered a state.
            </summary>
            <param name="machine">Machine</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.NotifyEnteredState(Microsoft.PSharp.Monitor)">
            <summary>
            Notifies that a monitor entered a state.
            </summary>
            <param name="monitor">Monitor</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.NotifyExitedState(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine exited a state.
            </summary>
            <param name="machine">Machine</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.NotifyExitedState(Microsoft.PSharp.Monitor)">
            <summary>
            Notifies that a monitor exited a state.
            </summary>
            <param name="monitor">Monitor</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.NotifyInvokedAction(Microsoft.PSharp.Machine,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine invoked an action.
            </summary>
            <param name="machine">Machine</param>
            <param name="action">Action</param>
            <param name="receivedEvent">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.NotifyCompletedAction(Microsoft.PSharp.Machine,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine completed invoking an action.
            </summary>
            <param name="machine">Machine</param>
            <param name="action">Action</param>
            <param name="receivedEvent">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.NotifyInvokedAction(Microsoft.PSharp.Monitor,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a monitor invoked an action.
            </summary>
            <param name="monitor">Monitor</param>
            <param name="action">Action</param>
            <param name="receivedEvent">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.NotifyRaisedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine raised an <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
            <param name="machine">Machine</param>
            <param name="eventInfo">EventInfo</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.NotifyRaisedEvent(Microsoft.PSharp.Monitor,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a monitor raised an <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
            <param name="monitor">Monitor</param>
            <param name="eventInfo">EventInfo</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.NotifyDequeuedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine dequeued an <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
            <param name="machine">Machine</param>
            <param name="eventInfo">EventInfo</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.NotifyPop(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine invoked pop.
            </summary>
            <param name="machine">Machine</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.NotifyReceiveCalled(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine called Receive.
            </summary>
            <param name="machine">Machine</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.NotifyHandleRaisedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine is handling a raised <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
            <param name="machine">Machine</param>
            <param name="eventInfo">EventInfo</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.NotifyWaitEvents(Microsoft.PSharp.Machine,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine is waiting to receive one or more events.
            </summary>
            <param name="machine">Machine</param>
            <param name="eventInfoInInbox">The event info if it is in the inbox, else null</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.NotifyReceivedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine received an <see cref="T:Microsoft.PSharp.Event"/> that it was waiting for.
            </summary>
            <param name="machine">Machine</param>
            <param name="eventInfo">EventInfo</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.NotifyHalted(Microsoft.PSharp.Machine,System.Collections.Generic.LinkedList{Microsoft.PSharp.EventInfo})">
            <summary>
            Notifies that a machine has halted.
            </summary>
            <param name="machine">Machine</param>
            <param name="inbox">Machine inbox.</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.NotifyDefaultEventHandlerCheck(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that the inbox of the specified machine is about to be
            checked to see if the default event handler should fire.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.NotifyDefaultHandlerFired(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that the default handler of the specified machine has been fired.
            </summary>
            <param name="machine">Machine</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.Log(System.String,System.Object[])">
            <summary>
            Logs the specified text.
            </summary>
            <param name="format">Text</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.SetLogger(Microsoft.PSharp.IO.ILogger)">
            <summary>
            Installs the specified <see cref="T:Microsoft.PSharp.IO.ILogger"/>.
            </summary>
            <param name="logger">ILogger</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.RemoveLogger">
            <summary>
            Removes the currently installed <see cref="T:Microsoft.PSharp.IO.ILogger"/>, and replaces
            it with the default <see cref="T:Microsoft.PSharp.IO.ILogger"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.GetNewOperationGroupId(Microsoft.PSharp.AbstractMachine,System.Nullable{System.Guid})">
            <summary>
            Gets the new operation group id to propagate.
            </summary>
            <param name="sender">Sender machine</param>
            <param name="operationGroupId">Operation group id</param>
            <returns>Operation group Id</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.SetOperationGroupIdForMachine(Microsoft.PSharp.Machine,Microsoft.PSharp.AbstractMachine,System.Nullable{System.Guid})">
            <summary>
            Sets the operation group id for the specified machine.
            </summary>
            <param name="created">Machine created</param>
            <param name="sender">Sender machine</param>
            <param name="operationGroupId">Operation group id</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.SetNetworkProvider(Microsoft.PSharp.Net.INetworkProvider)">
            <summary>
            Installs the specified <see cref="T:Microsoft.PSharp.Net.INetworkProvider"/>.
            </summary>
            <param name="networkProvider">INetworkProvider</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.RemoveNetworkProvider">
            <summary>
            Replaces the currently installed <see cref="T:Microsoft.PSharp.Net.INetworkProvider"/>
            with the default <see cref="T:Microsoft.PSharp.Net.INetworkProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.RaiseOnFailureEvent(System.Exception)">
            <summary>
            Raises the <see cref="E:Microsoft.PSharp.PSharpRuntime.OnFailure"/> event with the specified <see cref="T:System.Exception"/>.
            </summary>
            <param name="exception">Exception</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.WrapAndThrowException(System.Exception,System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:Microsoft.PSharp.AssertionFailureException"/> exception
            containing the specified exception.
            </summary>
            <param name="exception">Exception</param>
            <param name="s">Message</param>
            <param name="args">Message arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.Dispose">
            <summary>
            Disposes runtime resources.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.StateMachineRuntime">
            <summary>
            Runtime for executing state-machines in production.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.StateMachineRuntime.Monitors">
            <summary>
            List of monitors in the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.#ctor(Microsoft.PSharp.Configuration)">
            <summary>
            Constructor.
            </summary>
            <param name="configuration">Configuration</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.Initialize">
            <summary>
            Initializes various components of the runtime.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.CreateMachine(System.Type,Microsoft.PSharp.Event,System.Nullable{System.Guid})">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be
            used to access its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="operationGroupId">Operation group id</param>
            <param name="e">Event</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.CreateMachine(Microsoft.PSharp.MachineId,System.Type,Microsoft.PSharp.Event,System.Nullable{System.Guid})">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/>, using the specified
            unbound machine id, and passes the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This
            event can only be used to access its payload, and cannot be handled.
            </summary>
            <param name="mid">Unbound machine id</param>
            <param name="type">Type of the machine</param>
            <param name="e">Event</param>
            <param name="operationGroupId">Optional operation group id</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.CreateMachine(System.Type,System.String,Microsoft.PSharp.Event,System.Nullable{System.Guid})">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, and
            with the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be
            used to access its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="friendlyName">Friendly machine name used for logging</param>
            <param name="operationGroupId">Operation group id</param>
            <param name="e">Event</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.CreateMachineAndExecute(System.Type,Microsoft.PSharp.Event,System.Nullable{System.Guid})">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and with the
            specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when
            the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="operationGroupId">Operation group id</param>
            <param name="e">Event</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.CreateMachineAndExecute(Microsoft.PSharp.MachineId,System.Type,Microsoft.PSharp.Event,System.Nullable{System.Guid})">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/>, using the specified
            unbound machine id, and passes the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This
            event can only be used to access its payload, and cannot be handled. The method
            returns only when the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any)
            is handled.
            </summary>
            <param name="mid">Unbound machine id</param>
            <param name="type">Type of the machine</param>
            <param name="e">Event</param>
            <param name="operationGroupId">Optional operation group id</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.CreateMachineAndExecute(System.Type,System.String,Microsoft.PSharp.Event,System.Nullable{System.Guid})">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when the
            machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="friendlyName">Friendly machine name used for logging</param>
            <param name="operationGroupId">Operation group id</param>
            <param name="e">Event</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.RemoteCreateMachine(System.Type,System.String,Microsoft.PSharp.Event,System.Nullable{System.Guid})">
            <summary>
            Creates a new remote machine of the specified <see cref="T:System.Type"/> and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used
            to access its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="endpoint">Endpoint</param>
            <param name="operationGroupId">Operation group id</param>
            <param name="e">Event</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.RemoteCreateMachine(System.Type,System.String,System.String,Microsoft.PSharp.Event,System.Nullable{System.Guid})">
            <summary>
            Creates a new remote machine of the specified <see cref="T:System.Type"/> and name, and
            with the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used
            to access its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="friendlyName">Friendly machine name used for logging</param>
            <param name="endpoint">Endpoint</param>
            <param name="operationGroupId">Operation group id</param>
            <param name="e">Event</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.SendEvent(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine.
            </summary>
            <param name="target">Target machine id</param>
            <param name="e">Event</param>
            <param name="options">Optional parameters of a send operation.</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.SendEventAndExecute(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an <see cref="T:Microsoft.PSharp.Event"/> to a machine. Returns immediately
            if the target machine was already running. Otherwise blocks until the machine handles
            the event and reaches quiescense again.
            </summary>
            <param name="target">Target machine id</param>
            <param name="e">Event</param>
            <param name="options">Optional parameters of a send operation.</param>
            <returns>True if event was handled, false if the event was only enqueued</returns>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.RemoteSendEvent(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a remote machine.
            </summary>
            <param name="target">Target machine id</param>
            <param name="e">Event</param>
            <param name="options">Optional parameters of a send operation.</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.RegisterMonitor(System.Type)">
            <summary>
            Registers a new specification monitor of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">Type of the monitor</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.InvokeMonitor``1(Microsoft.PSharp.Event)">
            <summary>
            Invokes the specified monitor with the specified <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
            <typeparam name="T">Type of the monitor</typeparam>
            <param name="e">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.InvokeMonitor(System.Type,Microsoft.PSharp.Event)">
            <summary>
            Invokes the specified monitor with the specified <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
            <param name="type">Type of the monitor</param>
            <param name="e">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.GetCurrentOperationGroupId(Microsoft.PSharp.MachineId)">
            <summary>
            Returns the operation group id of the specified machine. Returns <see cref="F:System.Guid.Empty"/>
            if the id is not set, or if the <see cref="T:Microsoft.PSharp.MachineId"/> is not associated with this runtime.
            During testing, the runtime asserts that the specified machine is currently executing.
            </summary>
            <param name="currentMachine">MachineId of the currently executing machine.</param>
            <returns>Guid</returns>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.Stop">
            <summary>
            Notifies each active machine to halt execution to allow the runtime
            to reach quiescence. This is an experimental feature, which should
            be used only for testing purposes.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.CreateMachine(Microsoft.PSharp.MachineId,System.Type,System.String,Microsoft.PSharp.Event,Microsoft.PSharp.Machine,System.Nullable{System.Guid})">
            <summary>
            Creates a new <see cref="T:Microsoft.PSharp.Machine"/> of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="mid">Unbound machine id</param>
            <param name="type">Type of the machine</param>
            <param name="friendlyName">Friendly machine name used for logging</param>
            <param name="e">Event passed during machine construction</param>
            <param name="operationGroupId">Operation group id</param>
            <param name="creator">Creator machine</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.CreateMachineAndExecute(Microsoft.PSharp.MachineId,System.Type,System.String,Microsoft.PSharp.Event,Microsoft.PSharp.Machine,System.Nullable{System.Guid})">
            <summary>
            Creates a new <see cref="T:Microsoft.PSharp.Machine"/> of the specified <see cref="T:System.Type"/>. The
            method returns only when the created machine reaches quiescence
            </summary>
            <param name="mid">Unbound machine id</param>
            <param name="type">Type of the machine</param>
            <param name="friendlyName">Friendly machine name used for logging</param>
            <param name="e">Event passed during machine construction</param>
            <param name="operationGroupId">Operation group id</param>
            <param name="creator">Creator machine</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.CreateRemoteMachine(System.Type,System.String,System.String,Microsoft.PSharp.Event,Microsoft.PSharp.Machine,System.Nullable{System.Guid})">
            <summary>
            Creates a new remote <see cref="T:Microsoft.PSharp.Machine"/> of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">Type of the machine</param>
            <param name="friendlyName">Friendly machine name used for logging</param>
            <param name="endpoint">Endpoint</param>
            <param name="e">Event passed during machine construction</param>
            <param name="operationGroupId">Operation group id</param>
            <param name="creator">Creator machine</param>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.CreateMachine(Microsoft.PSharp.MachineId,System.Type,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.PSharp.Machine"/> of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="mid">Unbound machine id</param>
            <param name="type">Type of the machine</param>
            <param name="friendlyName">Friendly machine name used for logging</param>
            <returns>Machine</returns>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.SendEvent(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.AbstractMachine,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine.
            </summary>
            <param name="mid">MachineId</param>
            <param name="e">Event</param>
            <param name="sender">Sender machine</param>
            <param name="options">Optional parameters of a send operation.</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.SendEventAndExecute(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.AbstractMachine,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine. Returns immediately
            if the target machine was already running. Otherwise blocks until the machine handles
            the event and reaches quiescense again.
            </summary>
            <param name="mid">MachineId</param>
            <param name="e">Event</param>
            <param name="sender">Sender machine</param>
            <param name="options">Optional parameters of a send operation.</param>
            <returns>True if event was handled, false if the event was only enqueued</returns>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.SendEventRemotely(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.AbstractMachine,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a remote machine.
            </summary>
            <param name="mid">MachineId</param>
            <param name="e">Event</param>
            <param name="sender">Sender machine</param>
            <param name="options">Optional parameters of a send operation.</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.EnqueueEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,Microsoft.PSharp.AbstractMachine,System.Guid,System.Boolean@)">
            <summary>
            Enqueues an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine.
            </summary>
            <param name="machine">Machine</param>
            <param name="e">Event</param>
            <param name="sender">Sender machine</param>
            <param name="operationGroupId">Operation group id</param>
            <param name="runNewHandler">Run a new handler</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.RunMachineEventHandler(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,System.Boolean)">
            <summary>
            Runs a new asynchronous machine event handler.
            This is a fire and forget invocation.
            </summary>
            <param name="machine">Machine that executes this event handler.</param>
            <param name="initialEvent">Event for initializing the machine.</param>
            <param name="isFresh">If true, then this is a new machine.</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.RunMachineEventHandlerAsync(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,System.Boolean)">
            <summary>
            Runs a new asynchronous machine event handler.
            </summary>
            <param name="machine">Machine that executes this event handler.</param>
            <param name="initialEvent">Event for initializing the machine.</param>
            <param name="isFresh">If true, then this is a new machine.</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.TryCreateMonitor(System.Type)">
            <summary>
            Tries to create a new <see cref="T:Microsoft.PSharp.Monitor"/> of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">Type of the monitor</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.Monitor(System.Type,Microsoft.PSharp.AbstractMachine,Microsoft.PSharp.Event)">
            <summary>
            Invokes the specified <see cref="T:Microsoft.PSharp.Monitor"/> with the specified <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
            <param name="sender">Sender machine</param>
            <param name="type">Type of the monitor</param>
            <param name="e">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.GetNondeterministicBooleanChoice(Microsoft.PSharp.AbstractMachine,System.Int32)">
            <summary>
            Returns a nondeterministic boolean choice, that can be
            controlled during analysis or testing.
            </summary>
            <param name="machine">Machine</param>
            <param name="maxValue">Max value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.GetFairNondeterministicBooleanChoice(Microsoft.PSharp.AbstractMachine,System.String)">
            <summary>
            Returns a fair nondeterministic boolean choice, that can be
            controlled during analysis or testing.
            </summary>
            <param name="machine">Machine</param>
            <param name="uniqueId">Unique id</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.GetNondeterministicIntegerChoice(Microsoft.PSharp.AbstractMachine,System.Int32)">
            <summary>
            Returns a nondeterministic integer choice, that can be
            controlled during analysis or testing.
            </summary>
            <param name="machine">Machine</param>
            <param name="maxValue">Max value</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.NotifyEnteredState(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine entered a state.
            </summary>
            <param name="machine">Machine</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.NotifyEnteredState(Microsoft.PSharp.Monitor)">
            <summary>
            Notifies that a monitor entered a state.
            </summary>
            <param name="monitor">Monitor</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.NotifyExitedState(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine exited a state.
            </summary>
            <param name="machine">Machine</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.NotifyExitedState(Microsoft.PSharp.Monitor)">
            <summary>
            Notifies that a monitor exited a state.
            </summary>
            <param name="monitor">Monitor</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.NotifyInvokedAction(Microsoft.PSharp.Machine,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine invoked an action.
            </summary>
            <param name="machine">Machine</param>
            <param name="action">Action</param>
            <param name="receivedEvent">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.NotifyInvokedAction(Microsoft.PSharp.Monitor,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a monitor invoked an action.
            </summary>
            <param name="monitor">Monitor</param>
            <param name="action">Action</param>
            <param name="receivedEvent">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.NotifyRaisedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine raised an <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
            <param name="machine">Machine</param>
            <param name="eventInfo">EventInfo</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.NotifyRaisedEvent(Microsoft.PSharp.Monitor,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a monitor raised an <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
            <param name="monitor">Monitor</param>
            <param name="eventInfo">EventInfo</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.NotifyDequeuedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine dequeued an <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
            <param name="machine">Machine</param>
            <param name="eventInfo">EventInfo</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.NotifyWaitEvents(Microsoft.PSharp.Machine,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine is waiting to receive one or more events.
            </summary>
            <param name="machine">Machine</param>
            <param name="eventInfoInInbox">The event info if it is in the inbox, else null</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.NotifyReceivedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine received an <see cref="T:Microsoft.PSharp.Event"/> that it was waiting for.
            </summary>
            <param name="machine">Machine</param>
            <param name="eventInfo">EventInfo</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.NotifyHalted(Microsoft.PSharp.Machine,System.Collections.Generic.LinkedList{Microsoft.PSharp.EventInfo})">
            <summary>
            Notifies that a machine has halted.
            </summary>
            <param name="machine">Machine</param>
            <param name="inbox">Machine inbox.</param>
        </member>
        <member name="M:Microsoft.PSharp.StateMachineRuntime.Dispose">
            <summary>
            Disposes runtime resources.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Utilities.ErrorReporter">
            <summary>
            Reports errors and warnings to the user.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.ErrorReporter.Configuration">
            <summary>
            Configuration.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Utilities.ErrorReporter.Logger">
            <summary>
            The installed logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.ErrorReporter.#ctor(Microsoft.PSharp.Configuration,Microsoft.PSharp.IO.ILogger)">
            <summary>
            Constructor.
            </summary>
            <param name="configuration">Configuration</param>
            <param name="logger">ILogger</param>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.ErrorReporter.WriteErrorLine(System.String)">
            <summary>
            Reports an error, followed by the current line terminator.
            </summary>
            <param name="value">Text</param>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.ErrorReporter.WriteWarningLine(System.String)">
            <summary>
            Reports a warning, followed by the current line terminator.
            </summary>
            <param name="value">Text</param>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.ErrorReporter.Write(System.String,System.ConsoleColor)">
            <summary>
            Writes the specified string value.
            </summary>
            <param name="value">Text</param>
            <param name="color">ConsoleColor</param>
        </member>
        <member name="T:Microsoft.PSharp.Utilities.Profiler">
            <summary>
            The P# profiler.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.Profiler.StartMeasuringExecutionTime">
            <summary>
            Starts measuring execution time.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.Profiler.StopMeasuringExecutionTime">
            <summary>
            Stops measuring execution time.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.Profiler.Results">
            <summary>
            Returns profilling results.
            </summary>
            <returns>Seconds</returns>
        </member>
        <member name="T:Microsoft.PSharp.Utilities.BaseCommandLineOptions">
            <summary>
            The P# base command line options.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.BaseCommandLineOptions.Configuration">
            <summary>
            Configuration.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.BaseCommandLineOptions.Options">
            <summary>
            Command line options.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.BaseCommandLineOptions.#ctor(System.String[])">
            <summary>
            Constructor.
            </summary>
            <param name="args">Array of arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.BaseCommandLineOptions.Parse">
            <summary>
            Parses the command line options and returns a configuration.
            </summary>
            <returns>Configuration</returns>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.BaseCommandLineOptions.ParseOption(System.String)">
            <summary>
            Parses the given option.
            </summary>
            <param name="option">Option</param>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.BaseCommandLineOptions.CheckForParsingErrors">
            <summary>
            Checks for parsing errors.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.BaseCommandLineOptions.UpdateConfiguration">
            <summary>
            Updates the configuration depending on the
            user specified options.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.BaseCommandLineOptions.ShowHelp">
            <summary>
            Shows help.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Utilities.CompilationTarget">
            <summary>
            P# compilation target.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.CompilationTarget.Execution">
            <summary>
            Enables execution compilation target.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.CompilationTarget.Library">
            <summary>
            Enables library compilation target.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.CompilationTarget.Testing">
            <summary>
            Enables testing compilation target.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.CompilationTarget.Remote">
            <summary>
            Enables remote compilation target.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Utilities.OptimizationTarget">
            <summary>
            P# compilation optimization target.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.OptimizationTarget.Debug">
            <summary>
            Enables debug optimization target.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.OptimizationTarget.Release">
            <summary>
            Enables release optimization target.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Utilities.ReductionStrategy">
            <summary>
            Type of reduction strategy.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.ReductionStrategy.None">
            <summary>
            No reduction.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.ReductionStrategy.OmitSchedulingPoints">
            <summary>
            Reduction strategy that omits scheduling points.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.ReductionStrategy.ForceSchedule">
            <summary>
            Reduction strategy that forces scheduling points.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Utilities.SchedulingStrategy">
            <summary>
            P# runtime scheduling strategy.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.Interactive">
            <summary>
            Interactive scheduling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.Replay">
            <summary>
            Replay scheduling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.Portfolio">
            <summary>
            Portfolio scheduling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.Random">
            <summary>
            Random scheduling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.ProbabilisticRandom">
            <summary>
            Probabilistic random-walk scheduling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.PCT">
            <summary>
            Prioritized scheduling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.FairPCT">
            <summary>
            Prioritized scheduling with Random tail.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.DFS">
            <summary>
            Depth-first search scheduling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.IDDFS">
            <summary>
            Depth-first search scheduling with
            iterative deepening.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.DPOR">
            <summary>
            Dynamic partial-order reduction (DPOR) scheduling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.RDPOR">
            <summary>
            Randomized dynamic partial-order reduction (rDPOR) scheduling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.DelayBounding">
            <summary>
            Delay-bounding scheduling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.RandomDelayBounding">
            <summary>
            Random delay-bounding scheduling.
            </summary>
        </member>
    </members>
</doc>
